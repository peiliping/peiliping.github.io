<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pei LiPing's Blog</title>
    <description>Augur
</description>
    <link>http://peiliping.github.io/blog/</link>
    <atom:link href="http://peiliping.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 24 Jun 2019 12:57:22 +0800</pubDate>
    <lastBuildDate>Mon, 24 Jun 2019 12:57:22 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>初识flink7</title>
        <description>&lt;p&gt;flink基于1.5的定制化开发工作就告一段落了，业务团队对flink的诉求已经超越1.5了，&lt;/p&gt;

&lt;p&gt;主要集中在table、sql、state上，还有2phase的filesink等。&lt;/p&gt;

&lt;h2 id=&quot;or-18&quot;&gt;1.7 or 1.8&lt;/h2&gt;

&lt;p&gt;一个大的社区版本一般要维护1年左右。1.5的社区版我们从18年6月维护到现在，&lt;/p&gt;

&lt;p&gt;但从去年年底开始社区就对1.5停更了，我们只能自己从其他的版本中merge一些需要的bugfix。&lt;/p&gt;

&lt;p&gt;我们决定下一个大版本是1.8，主要基于一下几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;社区1.9的巨大投入会严重影响其他分支的更新速度，1.7已经进入暮年。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1.8的一些小特性我们看来还是非常实用的，值得蹚雷。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;刚刚准备release-1.8.1，未来还能从社区得到3-4个小版本。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1.9的更新过于巨大，真正稳定下来需要比较长的时间，1.8在未来一年多应该是首选。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;合并&lt;/h2&gt;

&lt;p&gt;1.8.1的一些issue被社区移到1.8.2去完成，所以很快就进入了RC阶段。&lt;/p&gt;

&lt;p&gt;我们在1.8分支上，进行了merge工作，主要是把我们在1.5上的定制工作迁移到1.8。&lt;/p&gt;

&lt;p&gt;合并的工作开展速度还是挺快的，预计2周左右就可以完成，顺手可以做一些小的重构。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;未来&lt;/h2&gt;

&lt;p&gt;在1.8的基础工作完成后，我们就要投入到Sql方向了。&lt;/p&gt;

&lt;p&gt;Sql的方向需要一些铺垫，比如State的管理功能增强，数据Table化等。&lt;/p&gt;

&lt;h3 id=&quot;state&quot;&gt;State增强&lt;/h3&gt;

&lt;p&gt;flink的state是核心组件，无论是故障恢复还是恰好一次，都至关重要。&lt;/p&gt;

&lt;p&gt;但是State的管理功能并不完善，比如如何让savepoint周期性的触发，&lt;/p&gt;

&lt;p&gt;如何合理利用checkpoint来恢复等。&lt;/p&gt;

&lt;h3 id=&quot;table&quot;&gt;数据Table化&lt;/h3&gt;

&lt;p&gt;Flink的数据来源其实是比较集中的，大部分来自Kafka或者MQ。&lt;/p&gt;

&lt;p&gt;再经过一些反序列化工作，应该可以映射为Pojo或者说Table。&lt;/p&gt;

&lt;p&gt;这部分工作在其他公司里也是差不多的，做一些定制化的开发，并不难。&lt;/p&gt;

&lt;p&gt;但是一些数据质量高的公司做这一步就非常快，比如格式比较统一等。&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Jun 2019 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2019-06-13-flink7</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2019-06-13-flink7</guid>
        
        
        <category>flink</category>
        
      </item>
    
      <item>
        <title>初识flink6</title>
        <description>&lt;p&gt;基于社区版1.5的定制化开发工作已经接近尾声了，最后一个大的Feature是背压指标的量化。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;背压&lt;/h2&gt;

&lt;p&gt;流计算框架上都提供了背压相关的机制，但监控量化的形式各有不同。&lt;/p&gt;

&lt;p&gt;Flink-UI上提供了一个背压探测的功能，基本原理就是Profiling。&lt;/p&gt;

&lt;p&gt;在实际应用中，我们发现了很多问题，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;只能观测当前，无法回溯历史；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一次只能观测一个taskchain，没有全局概念；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;量化概念模糊，不利于告警预警；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;开销高，无法长期运行；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;综上，我们决定开发自己的背压监控功能，并为用户提供预警告警的功能。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;量化&lt;/h2&gt;

&lt;p&gt;我们定义背压的指标和之前fregata做伸缩容的指标是一个含义，内部称之为自旋时间，&lt;/p&gt;

&lt;p&gt;简单来说就是数据处理线程等待eventbuffer的时间。&lt;/p&gt;

&lt;p&gt;在flink中，主要修改如下几个类：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
RecordWriter.requestNewBufferBuilder

LocalBufferPool.requestBufferBuilderBlocking

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在LocalBufferPool的requestBuffer时，会进入一段while循环&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
while (availableMemorySegments.isEmpty()) 

    ...
    availableMemorySegments.wait(2000);
    ...

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这块代码主要是我们修改的区域。&lt;/p&gt;

&lt;p&gt;总的来说，我们统计了wait的时间和进入while循环的次数，作为背压的指标。&lt;/p&gt;

&lt;p&gt;进入while循环次数多，我们认为stream是时断时续的，效率不高，类似堵车，&lt;/p&gt;

&lt;p&gt;这类问题大多需要调节networkbuffer大小，并行度等可以有效解决。&lt;/p&gt;

&lt;p&gt;wait的累加时间长（比如1min里有58s在wait），任务下游严重阻塞，&lt;/p&gt;

&lt;p&gt;这类问题最大的可能是下游IO超时阻塞。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;维度&lt;/h2&gt;

&lt;p&gt;我们的监控数据最后是进入Promethues的，有了指标和值，还需要一些维度信息。&lt;/p&gt;

&lt;p&gt;Flink的Metric主要是task级和Operator级，所以我们只要参照flink的&lt;/p&gt;

&lt;p&gt;metric定义方式，就获得了subtask的一系列标签(taskId,index,attemptId等)。&lt;/p&gt;

&lt;p&gt;在此基础上，我们又将数据的target也作为了一个维度，就是RecordWriter中的&lt;/p&gt;

&lt;p&gt;targetChannelId。如果一个task的下游有多个target，我们可以区分出到底是&lt;/p&gt;

&lt;p&gt;哪一个导致背压的。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;开销&lt;/h2&gt;

&lt;p&gt;我们增加的这些统计指标，在程序没法发生背压时是没有任何开销的，一旦发生背压，&lt;/p&gt;

&lt;p&gt;就意味着程序的吞吐极具下降，那么相关逻辑的执行次数也非常少，costtime的计算&lt;/p&gt;

&lt;p&gt;和累加计数器的操作开销也非常低，几乎可以忽略不计。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;效果&lt;/h2&gt;

&lt;p&gt;监控数据打通后，我们在Promethues上进行了一下统计，发现了20多个任务存在背压，&lt;/p&gt;

&lt;p&gt;我们也对比了Flink-WebUI上的探测结果，结论都是准确的，证明方案是可行有效的。&lt;/p&gt;
</description>
        <pubDate>Sat, 18 May 2019 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2019-05-18-flink6</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2019-05-18-flink6</guid>
        
        
        <category>flink</category>
        
      </item>
    
      <item>
        <title>avro优化</title>
        <description>&lt;p&gt;最近在进行fregata2.0重构时，再次优化avro的反序列化过程。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;背景&lt;/h3&gt;

&lt;p&gt;fregata-quasi任务是典型的cpu和内存都高度消耗的场景，主要是数据的&lt;/p&gt;

&lt;p&gt;序列化和反序列化。通过JFR多次观测，其中一个热点是avro中的字符串类型&lt;/p&gt;

&lt;p&gt;数据的处理（实际数据中字符串类型出现的比较多，201712的blog也提到过）。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;问题源码&lt;/h3&gt;

&lt;p&gt;对相关代码进行分析后，把目光落在这个区域。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (length &amp;lt; 0)
    throw new AvroRuntimeException(&quot;Malformed data. Length is negative: &quot;+ length);
int remaining = limit - pos;
if (length &amp;lt;= remaining) {
    System.arraycopy(buf, pos, bytes, start, length);
    pos += length;
} else {
    // read the rest of the buffer
    System.arraycopy(buf, pos, bytes, start, remaining);
    start += remaining;
    length -= remaining;
    pos = limit;
    // finish from the byte source
    source.readRaw(bytes, start, length);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在字符串处理中，Avro引入了一个UTF8对象（本质就是一个byte数组），&lt;/p&gt;

&lt;p&gt;在经过这段代码后，再将UTF8对象转为String，经过string的decode。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;优化&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int start = 0;
int length = readInt();
if (length &amp;lt; 0) {
    throw new AvroRuntimeException(&quot;Malformed data length : &quot; + length);
}
int remaining = limit - pos;
if (length &amp;lt;= remaining) {
    result = new String(buf, pos, length);
    pos += length;
} else {
    //read the rest of the buffer
    result = new String(buf, pos, remaining);
    start += remaining;
    length -= remaining;
    pos = limit;
    //finish from the byte source
    source.readRaw(null, start, length);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里主要是省掉了中间的UTF8对象，减少了一次System.arraycopy&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;结论&lt;/h3&gt;

&lt;p&gt;经过测试，这个优化可以提升10%左右的反序列化速度。&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Apr 2019 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2019-04-26-avro2</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2019-04-26-avro2</guid>
        
        
        <category>avro</category>
        
      </item>
    
      <item>
        <title>总结</title>
        <description>&lt;p&gt;Q1马上就要结束了，最近一直在忙一些规划和总结性的东西。&lt;/p&gt;

&lt;p&gt;这次就随便聊聊，没有什么主题。&lt;/p&gt;

&lt;h2 id=&quot;flink&quot;&gt;Flink&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;1.5升级到1.7&lt;/h3&gt;

&lt;p&gt;因为业务上的需求，最近在准备将我们的Flink版本从1.5升级到1.7，&lt;/p&gt;

&lt;p&gt;开发还算顺利，我们定制的各种特性也都迁移到1.7的版本上。&lt;/p&gt;

&lt;p&gt;不过Flink社区的开发进度，总体上感觉比去年要慢了许多。&lt;/p&gt;

&lt;h3 id=&quot;sql&quot;&gt;SQL化&lt;/h3&gt;

&lt;p&gt;看了不少公司在实时计算平台建设的文章，提到了很多实时任务SQL化的计划，&lt;/p&gt;

&lt;p&gt;从我的感受来说，并没有觉得SQL化的迫切，也许是业务特点不一样吧。&lt;/p&gt;

&lt;p&gt;目前平台上跑的几百个任务来看，用户的编写质量确实很差，&lt;/p&gt;

&lt;p&gt;开发一个性能优异的Flink任务，需要的知识储备其实挺高的，&lt;/p&gt;

&lt;p&gt;绝大多数业务方只能照葫芦画瓢，并没有时间去深入理解和研究。&lt;/p&gt;

&lt;p&gt;由平台方来编写一些标准化的工具，减少粗制滥造的重复开发是很有必要的。&lt;/p&gt;

&lt;p&gt;但工具化、配置化，不一定要是SQL化，当然公司有足够的投入另当别论。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;有状态&lt;/h3&gt;

&lt;p&gt;对有状态任务的支持，是Flink相比其他实时计算框架的巨大优势。&lt;/p&gt;

&lt;p&gt;目前，平台上的任务对State的诉求非常低，这并不是一个健康的状况。&lt;/p&gt;

&lt;p&gt;今年Q2开始，我们会加大力度在对State的支持方面，也做一些周边的开发，&lt;/p&gt;

&lt;p&gt;降低state的开发难度，提升性能和效率。&lt;/p&gt;
</description>
        <pubDate>Fri, 22 Mar 2019 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2019-03-22-summary</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2019-03-22-summary</guid>
        
        
        <category>summary</category>
        
      </item>
    
      <item>
        <title>自动伸缩</title>
        <description>&lt;p&gt;这次讲一下Fregata重构中的一个重要内容-自动伸缩，主要是解决两个方向的问题：&lt;/p&gt;

&lt;p&gt;1、突发流量需要人工介入，不及时也太耗费人力&lt;/p&gt;

&lt;p&gt;2、周期性波动的数据处理，在波峰波谷时不同处理方式&lt;/p&gt;

&lt;p&gt;为了解决这些问题，我们在重构的Topology基础上，增加了伸缩容功能，可以增减&lt;/p&gt;

&lt;p&gt;Parser和Sink的个数。下面介绍一下伸缩功能的一个基础，那就是如何判断伸缩。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;状态&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;基本状态&lt;/h3&gt;

&lt;p&gt;在讨论这个功能时，我们一度非常困惑于如何对状态进行定义和划分还有转化。&lt;/p&gt;

&lt;p&gt;我们阅读了很多关于状态机的文章和demo，定了4个基础状态：&lt;/p&gt;

&lt;p&gt;1、固定状态（不可以缩、也不可以扩）&lt;/p&gt;

&lt;p&gt;2、最大（不可以扩，可缩）&lt;/p&gt;

&lt;p&gt;3、最小（不可以缩，可扩）&lt;/p&gt;

&lt;p&gt;4、中间状态（可扩，可缩）&lt;/p&gt;

&lt;p&gt;Topology中的Parser和Sink都有自己各自的状态，独立计算互不影响。&lt;/p&gt;

&lt;p&gt;按照其并行度的最小值、最大值、当前值来作为定义状态的基础参数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	this.statesRules.add(new FixedStatus(super.componentType, 1, 1, 1));
        this.statesRules.add(new MinStatus(super.componentType, 3, 1, 1));
        this.statesRules.add(new BriskStatus(super.componentType, 3, 1, 2));
        this.statesRules.add(new MaxStatus(super.componentType, 3, 1, 3));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;匹配、转化&lt;/h3&gt;

&lt;p&gt;我们的状态匹配方式就是最简单的遍历&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        for (IStatus status : this.statesRules) {
            IStatus result = status.matchStatus(upperBound, lowerBound, cur);
            if (result != null) {
                return result;
            }
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;趋势&lt;/h3&gt;

&lt;p&gt;每个周期的监控指标都会输入到当前状态中，指标的计算会得出一个当前的趋势（伸、缩、不动）。&lt;/p&gt;

&lt;p&gt;在当前状态中，保持一个时间序列的趋势集合，当连续N次趋势产生时，就会触发状态的改变，也会&lt;/p&gt;

&lt;p&gt;触发一个Action事件。每种状态因为其特点不同，对趋势的处理也会有所不同。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;伸缩分类&lt;/h2&gt;

&lt;p&gt;伸缩我们主要分为两类：&lt;/p&gt;

&lt;p&gt;1、Topology的伸缩，也就是增减并行度。&lt;/p&gt;

&lt;p&gt;2、K8s的Deployment的伸缩，也就是增减副本数。&lt;/p&gt;

&lt;h3 id=&quot;topology&quot;&gt;Topology内&lt;/h3&gt;

&lt;p&gt;我们是优先对Topology进行调整，这样的代价是最小的。&lt;/p&gt;

&lt;h3 id=&quot;docker&quot;&gt;Docker副本数&lt;/h3&gt;

&lt;p&gt;当Topology已经是最小时，就考虑适当的减少Docker副本，进一步释放资源。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;收益&lt;/h2&gt;

&lt;p&gt;无论是哪种伸缩，都可以帮助我们在流量增大时，自动提升处理能力去应对，在数据量小的时候，减少对&lt;/p&gt;

&lt;p&gt;外部的负担，减少Tcp连接数、HDFS小文件数、提高数据的密度等。&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Feb 2019 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2019-02-25-scale</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2019-02-25-scale</guid>
        
        
        <category>scale</category>
        
        <category>auto</category>
        
        <category>fregata</category>
        
      </item>
    
      <item>
        <title>优化流式任务</title>
        <description>&lt;p&gt;去年花了大半年的时间在Fregata项目上，目前的部署规模在12000个docker的水平。今年上半年打算&lt;/p&gt;

&lt;p&gt;对Fregata项目进行一次框架上的升级，目标是提升性能，为上下游生态系统减负。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;拓扑&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;旧拓扑&lt;/h3&gt;

&lt;p&gt;之前的拓扑是树形拓扑，意味下游节点的并行度不能低于上游的，至少保持一致。&lt;/p&gt;

&lt;p&gt;1个Source，3个Parser，3个Sink，Parser和Sink一一对应，数据不会交叉。&lt;/p&gt;

&lt;p&gt;1个Source，3个Parser，6个Sink，每个Parser后面对应2个Sink。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;新拓扑&lt;/h3&gt;

&lt;p&gt;新拓扑中的Parser可以将数据分发给任何一个Sink。&lt;/p&gt;

&lt;p&gt;1个Source，2个Parser，5个Sink 每个Parser后面都对应5个Sink。&lt;/p&gt;

&lt;p&gt;通过控制数据的离散规则可以达到旧拓扑的效果，也就是说，旧拓扑是新拓扑的一种特例。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;好处&lt;/h3&gt;

&lt;p&gt;通过更加合理的配比，达到最小资源和最大性能，举例说明：&lt;/p&gt;

&lt;p&gt;老：1×Source +　5×Parser + 5×Sink = 11×Component&lt;/p&gt;

&lt;p&gt;新：1×Source +　3×Parser + 6×Sink = 10×Component&lt;/p&gt;

&lt;p&gt;在我们的测试中，新拓扑方案比老的快20%，因为整个Stream的瓶颈在Sink，Parser只需要3个就可以。&lt;/p&gt;

&lt;p&gt;在减少component的情况下，性能依然得到的提升，减少component，意味着线程数的减少，&lt;/p&gt;

&lt;p&gt;buffer区个数会减少，内存预分配的占用也会减少。&lt;/p&gt;

&lt;h2 id=&quot;buffer&quot;&gt;Buffer&lt;/h2&gt;

&lt;p&gt;在这次调优过程中，我们测试了buffer的大小，前后比例对性能的影响。&lt;/p&gt;

&lt;p&gt;buffer超过1024后，对性能的提升帮助不大，前提是sink端的性能相对稳定。&lt;/p&gt;

&lt;p&gt;source到parser间的buffer设置的更大一下，更有利于性能的稳定。&lt;/p&gt;

&lt;h2 id=&quot;kafkasink&quot;&gt;KafkaSink&lt;/h2&gt;

&lt;p&gt;老版里我们在Sink上抽象了一层BatchSink，这次重构我们将Batch的逻辑全部交给Kafka的&lt;/p&gt;

&lt;p&gt;Client去处理，利用它的linger和batchsize等操作。性能得到20%-30%的提升。&lt;/p&gt;

&lt;p&gt;我们对Kafka的Producer也进行了大量的测试，如果我们最大限度的让Producer积攒数据，&lt;/p&gt;

&lt;p&gt;会让数据的体积更小，网络和磁盘的开销都会有2-3倍的节约，在消费解压时也会更快。&lt;/p&gt;

&lt;h2 id=&quot;spintime&quot;&gt;SpinTime&lt;/h2&gt;

&lt;p&gt;在老版里，我们就使用SpinTime来进行系统性能的预警，在新版里我们主要使用Spintime来进行&lt;/p&gt;

&lt;p&gt;自动伸缩容的评判，目前还在测试中。&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Jan 2019 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2019-01-20-stream</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2019-01-20-stream</guid>
        
        
        <category>stream</category>
        
        <category>fregata</category>
        
      </item>
    
      <item>
        <title>初识flink5</title>
        <description>&lt;p&gt;先简单介绍一下我们Flink的一个优化，关于asyncfunction的优化&lt;/p&gt;

&lt;h2 id=&quot;asyncfunction&quot;&gt;AsyncFunction&lt;/h2&gt;

&lt;p&gt;阿里为flink社区提供了async的patch，为解决流计算中的IO性能提升带来了新思路，&lt;/p&gt;

&lt;p&gt;但我个人觉得这个问题并没有真正解决，Asyncfunction更像是一个饮鸩止渴的方案。&lt;/p&gt;

&lt;p&gt;随着异步线程的增加，很快会将外部服务打满，性能极具下降。&lt;/p&gt;

&lt;p&gt;我们的优化思路是这样的，在与外部系统交互时，尽量使用小批量，而不是单条数据处理。&lt;/p&gt;

&lt;p&gt;将async和batch结合起来，提升asyncfunction的效率。&lt;/p&gt;

&lt;p&gt;具体的实现：&lt;/p&gt;

&lt;p&gt;引入一个ringbuffer作为缓冲，asyncfunction在asyncinvoke时，将数据写入buffer中，&lt;/p&gt;

&lt;p&gt;配置N个消费线程，消费ringbuffer里的数据，进行batch的积攒，并配置ringbuffer的timeout，&lt;/p&gt;

&lt;p&gt;一次来实现N条最大M秒的批量数据积攒，在消费线程内，对积攒的批量数据进行处理，&lt;/p&gt;

&lt;p&gt;返回结果的拆分，最后调用ResultFuture，将数据交还给asyncfunction。&lt;/p&gt;

&lt;h2 id=&quot;batchasyncfunction&quot;&gt;通用BatchAsyncFunction的实现&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
  @Override
    public void asyncInvoke(IN input, ResultFuture&amp;lt;OUT&amp;gt; resultFuture) throws Exception {
        long seq = this.ringBuffer.next();
        Event event = this.ringBuffer.get(seq);
        event.data = input;
        event.resultFuture = resultFuture;
        this.ringBuffer.publish(seq);
    }


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;通用批量消费线程的抽象&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
public abstract class Processor&amp;lt;D, T, P&amp;gt; implements WorkHandler&amp;lt;Event&amp;lt;D, T&amp;gt;&amp;gt;, TimeoutHandler, LifecycleAware {

    protected AsyncConfig asyncConfig;

    private boolean initedBatch;

    private List&amp;lt;Triple&amp;lt;D, ResultFuture&amp;lt;T&amp;gt;, P&amp;gt;&amp;gt; batch;

    private long lastBatchTime;

    public Processor(AsyncConfig asyncConfig) {
        this.asyncConfig = asyncConfig;
        this.batch = Lists.newArrayList();
    }

    @Override
    public void onStart() {
        cleanAfterBatch();
    }

    @Override
    public void onEvent(Event&amp;lt;D, T&amp;gt; event) throws Exception {
        if (!this.initedBatch) {
            initBatch(false);
            this.initedBatch = true;
        }

        P param = buildBatchParams(event.data);
        this.batch.add(Triple.of(event.data, event.resultFuture, param));

        if ((this.batch.size() &amp;gt;= this.asyncConfig.getRingbufferMaxBatchSize()) || (System.currentTimeMillis() - this
                .lastBatchTime &amp;gt;= this.asyncConfig.getRingbufferLingerMs())) {
            execBatch(0);
            cleanAfterBatch();
        }
    }

    @Override
    public void onTimeout(long l) throws Exception {
        if (this.initedBatch) {
            execBatch(0);
            cleanAfterBatch();
        }
    }

    @Override
    public void onShutdown() {
        if (this.initedBatch) {
            execBatch(0);
            cleanAfterBatch();
        }
    }

    protected abstract void initBatch(boolean retry);

    protected abstract P buildBatchParams(D data);

    protected void cleanAfterBatch() {
        this.initedBatch = false;
        this.batch.clear();
        this.lastBatchTime = System.currentTimeMillis();
    }

    protected void execBatch(int times) {
        Validate.isTrue(this.asyncConfig.getAsyncMaxRetry() &amp;gt; times, &quot;execbatch retry-times : &quot; + times);
        try {
            if (times &amp;gt; 0) {
                initBatch(true);
            }
            commitAndGetResultsAndCloseBatch();
            this.batch.forEach(triple -&amp;gt; pushData(triple.getLeft(), triple.getMiddle(), triple.getRight()));
        } catch (Exception e) {
            try {
                Thread.sleep(this.asyncConfig.getAsyncRetryIntervalMs());
            } catch (InterruptedException e1) {
                throw new RuntimeException(&quot;Failed to exec batch&quot;, e1);
            }
            execBatch(times + 1);
        }
    }

    protected abstract void commitAndGetResultsAndCloseBatch() throws Exception;

    protected abstract void pushData(D data, ResultFuture&amp;lt;T&amp;gt; resultFuture, P param);

}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 05 Dec 2018 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2018-12-05-flink5</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2018-12-05-flink5</guid>
        
        
        <category>clone</category>
        
        <category>invoke</category>
        
        <category>beancopy</category>
        
      </item>
    
      <item>
        <title>初识flink4</title>
        <description>&lt;p&gt;我们最近merge了flink1.5.5的官方更新，并对batchsink进行深入开发。&lt;/p&gt;

&lt;h2 id=&quot;monkey&quot;&gt;Monkey&lt;/h2&gt;

&lt;p&gt;上次介绍我们的batchsink具备常规的功能，能够支持按照lingertime、数据大小、数据条数&lt;/p&gt;

&lt;p&gt;进行batch的拆分。这个月我们在其中嵌入了一个叫monkey的字段，动态调节batch大小。&lt;/p&gt;

&lt;p&gt;具体使用方法如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  public boolean checkFull() {
        return WP.get() - RP.get() == this.size - this.monkey;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过引入一个变量，实现了ringbuffer大小的动态调节。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;动态调节的时机&lt;/h2&gt;

&lt;p&gt;我们将ringbuffer的每一圈的开始作为汇报监控指标和调节monkey值的时机。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int sq = mod(cur);
if (this.adjustment != null &amp;amp;&amp;amp; sq == 0) {
  this.monkey = this.adjustment.onFirstEvent(ele, RING[mod(cur + 1)], (cur / this.size), this.monkey,
  this.size);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;汇报时将当前写入数据的slot和即将被写入数据的slot当成参数传递个adjustment，&lt;/p&gt;

&lt;p&gt;还提供了圈数、oldmonkey值和圈大小等信息，返回值是新的monkey值。&lt;/p&gt;

&lt;h2 id=&quot;adjustment&quot;&gt;Adjustment&lt;/h2&gt;

&lt;p&gt;那么monkey的动态可以做什么呢？我们想实现对batchsize的自动化测试。&lt;/p&gt;

&lt;p&gt;每当我们给一个开源的软件填写batchsize参数配置时，大多是拍脑袋出来的，&lt;/p&gt;

&lt;p&gt;也可能做了一些简单的性能测试，这个过程比较枯燥，就是反复修改值，反复运行。&lt;/p&gt;

&lt;p&gt;通过monkey的动态，我们可以将每一个batch大小进行几十次测试，然后按照&lt;/p&gt;

&lt;p&gt;一个步长变更batch大小，继续进行测试，将原来手工的方式变成自动化的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    public long onFirstEvent(Element&amp;lt;T&amp;gt; first, Element&amp;lt;T&amp;gt; second, long cycles, long oldMonkey, long maxSize) {
        if (cycles &amp;gt; 0) {
            log.warn(&quot;Cycle {} , Monkey {} , Cost {} ms , Volume {} , Record {} .&quot;, cycles, oldMonkey, first.getTimestampW() -
                    second.getTimestampW(), first.getAccVolume() - second.getAccVolume(), maxSize);

            this.metrics.add(new double[]{oldMonkey, (first.getTimestampW() - second.getTimestampW()), ((double) maxSize *
                    1000) / (first.getTimestampW() - second.getTimestampW())});

            if (cycles % this.intervalCycle == 0) {
                formulaFitting();

                if (maxSize - oldMonkey &amp;lt;= this.monkeyStepSize) {
                    this.result.forEach(doubles -&amp;gt; log.warn(&quot;evaluate : &quot; + Arrays.toString(doubles)));
                    this.result.clear();
                    return this.roundTrip ? 0 : oldMonkey;
                } else {
                    return oldMonkey + this.monkeyStepSize;
                }
            }
        }
        return oldMonkey;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;简单的几行代码，我们就基本实现了这个需求。每运行N圈后，将monkey增加一个monkeystepsize。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;评价&lt;/h2&gt;

&lt;p&gt;经过一系列的测试后，我们如何评估最佳的batchsize呢？&lt;/p&gt;

&lt;p&gt;在运行时，我们已经将一些指标记录到了metrics里，包括monkey大小，跑一圈的cost，还有每秒吞吐条数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   double totalRate = 0;
        for (int i = 0; i &amp;lt; this.metrics.size(); i++) {
            totalRate += this.metrics.get(i)[2];
        }
        double avgRate = totalRate / this.metrics.size();
        double acc = 0;
        for (int i = 0; i &amp;lt; this.metrics.size(); i++) {
            acc += Math.pow(this.metrics.get(i)[2] - avgRate, 2);
        }
        this.result.add(new double[]{this.metrics.get(0)[0], totalRate / this.metrics.size(), acc / (this.metrics.size() - 1)});
        this.metrics.clear();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然后我们对metrics进行一些简单的数据分析，计算均值还有方差，来评价最优解。&lt;/p&gt;

&lt;p&gt;在我们的测试中，平均速度差距不大，但是方差有明显的变化趋势，随着batch大小的增长，&lt;/p&gt;

&lt;p&gt;方差越来越大，通过观察jvm的内存变化推测为，由于batchcache的数据量增大，数据更&lt;/p&gt;

&lt;p&gt;容易进入到old区，导致fgc的频率提高，ygc的时间变长，导致速度的波动较大。&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Nov 2018 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2018-11-22-flink4</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2018-11-22-flink4</guid>
        
        
        <category>flink</category>
        
      </item>
    
      <item>
        <title>初识flink3</title>
        <description>&lt;p&gt;Flink的更新非常快，1.5的小版本一直都有更新，十一国庆前，我们将自己的定制版分支merge了&lt;/p&gt;

&lt;p&gt;官方的1.5.4，修复了taskmanager堆内外的内存比例，flink-stream使用堆外的量并不是很大，&lt;/p&gt;

&lt;p&gt;我们配置了7:3。&lt;/p&gt;

&lt;h2 id=&quot;asyncio&quot;&gt;AsyncIO&lt;/h2&gt;

&lt;p&gt;阿里给Flink社区提交了很多patch，印象比较深的是AsyncIO，在流式计算中IO导致性能瓶颈，&lt;/p&gt;

&lt;p&gt;是最常见的一个现象，异步化的改造能提升不少性能。Async的Operator实现并不是很复杂，&lt;/p&gt;

&lt;p&gt;简单来说就是创建一个buffer，将Stream数据填充进来并行处理，返回结果时控制一下数据的&lt;/p&gt;

&lt;p&gt;顺序，跟我们最常见的单机多线程的数据处理本质上是一样的。&lt;/p&gt;

&lt;p&gt;但是异步化会带来一个非常严重的后果，那就是IO的接收方会承受巨大的压力，通过调节buffer&lt;/p&gt;

&lt;p&gt;的大小和并行度，我们轻松的获得了几千几万的并行能力，但是这个IO服务（无论是RPC还是DB）&lt;/p&gt;

&lt;p&gt;接收了如性能压测般的流量，最终的结果就是IO服务拥塞，无法提供正常服务了。&lt;/p&gt;

&lt;p&gt;AsyncIO的思路是没有问题的，但是各种Java世界中的各种Client的API风格并非为了Stream而生，&lt;/p&gt;

&lt;p&gt;理想的API风格是kafka Producer的样子，流转批 + 异步回调。&lt;/p&gt;

&lt;h2 id=&quot;stream-batch&quot;&gt;Stream-&amp;gt;Batch&lt;/h2&gt;

&lt;p&gt;为了能让AsyncIO发挥作用，我们需要收敛IO的次数，将多次IO合并为一次Batch，基于Batch再做&lt;/p&gt;

&lt;p&gt;AsyncIO的操作，这样可以在减小并行度的情况下，能保证较高的吞吐量，减少协议部分的开销，&lt;/p&gt;

&lt;p&gt;如果你用过redis的pipeline，差不多一样的道理。&lt;/p&gt;

&lt;p&gt;当然Stream-&amp;gt;Batch并不是那么简单的事情，需要考虑的细节非常多，比如对checkpoint的处理，&lt;/p&gt;

&lt;p&gt;watermarket如何触发等，防止破坏了FLink本身的一致性。&lt;/p&gt;

&lt;p&gt;我们的思路是将AsyncIO和Stream转Batch结合在一起实现，提供一层类似KafkaProducer风格的&lt;/p&gt;

&lt;p&gt;API，将Stream-&amp;gt;Batch转为标准的定义，最后结合AsyncIO的特征来实现，AsyncIO对watermarket&lt;/p&gt;

&lt;p&gt;和checkpoint是有特殊处理的，这部分逻辑要尽量保持复用。&lt;/p&gt;

&lt;h2 id=&quot;batch-sink&quot;&gt;Batch Sink&lt;/h2&gt;

&lt;p&gt;所有任务Sink都是需要Batch特性的，如果是kafkaSink那真的非常简单，天然支持。我读了一下&lt;/p&gt;

&lt;p&gt;业务方的代码，他们在Sink这个环节的实现都非常简陋，大多数都无法保证不丢数据，比如基于&lt;/p&gt;

&lt;p&gt;一个简单的flatmap来实现。&lt;/p&gt;

&lt;p&gt;于是我们开发了BatchSink抽象，提供时间、大小、条数的控制条件，还有checkpoint触发flush。&lt;/p&gt;

&lt;p&gt;值得一提的是flush中的retry实现，批量操作失败如何重试呢？&lt;/p&gt;

&lt;p&gt;这是一个非常好的问题，一年多前我在开发meepo时就有这样的困惑，当时主要是读写mysql，&lt;/p&gt;

&lt;p&gt;我将mysql client的源码读了大半，实现了非常低开销的基于preparestatement的retry。&lt;/p&gt;

&lt;p&gt;但这种方式并不一定适用于所有的client，于是我们在batchsink中嵌入了一个小的ringbuffer，&lt;/p&gt;

&lt;p&gt;用来缓存这个批次的数据，在flush成功后清空ringbuffer。retry时复用handlerElement方法，&lt;/p&gt;

&lt;p&gt;将这一批次的数据进行replay，当然也支持noreplay的retry方法。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; protected void sendBatch(int times, boolean bySnapshot) {
        Validate.isTrue(this.batchConfig.getMaxRetriesNum() &amp;gt; times, &quot;sendbatch retry-times : &quot; + times);
        try {
            if (times &amp;gt; 0) {
                initBatch(true);
                if (this.batchConfig.isNeedReplayWhenRetry()) {
                    int l = this.buffer.curSize();
                    for (int i = 0; i &amp;lt; l; i++) {
                        Optional&amp;lt;IN&amp;gt; record = this.buffer.get();
                        Validate.notNull(record);
                        IN e = Optional.empty() == record ? null : record.get();
                        handleRecord(e);
                        this.buffer.add(e);
                    }
                }
            }
            flushAndClose(bySnapshot);
        } catch (Exception e) {
            LOG.error(&quot;FlushAndCloseError : &quot;, e);
            try {
                Thread.sleep(this.batchConfig.getBatchDelayPeriodMs());
            } catch (InterruptedException e1) {
                throw new RuntimeException(&quot;Failed to send batchRecords&quot;, e1);
            }
            sendBatch(times + 1, bySnapshot);
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 15 Oct 2018 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2018-10-15-flink3</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2018-10-15-flink3</guid>
        
        
        <category>flink</category>
        
      </item>
    
      <item>
        <title>初识flink2</title>
        <description>&lt;p&gt;续上一篇Blog，我们从网上下载二进制的Flink包，在其外围进行一些脚本改造，&lt;/p&gt;

&lt;p&gt;docker镜像的开发，可以让我们把Flink在K8s上跑起来了，接下来就是要接触Flink的源码了。&lt;/p&gt;

&lt;p&gt;说道源码还是挺头大的一个事，目前apache下面的跟大数据相关的项目你下载下来就会发现&lt;/p&gt;

&lt;p&gt;子项目子模块非常多，maven编译一下少说十几分钟，hadoop这种级别的项目编译1个小时都正常。&lt;/p&gt;

&lt;h2 id=&quot;flink&quot;&gt;Flink分支&lt;/h2&gt;

&lt;p&gt;将Flink从Git上clone下来，选择一个你中意的分支或者tag，注意Flink的分支和tag的命名规则。&lt;/p&gt;

&lt;p&gt;因为我们后面要持续对Flink进行开发，而且要不断合并社区的更新，这里需要一些git的技巧。&lt;/p&gt;

&lt;p&gt;我们主要是在1.5.X这个系列上进行开发，所以将Flink项目的1.5分支同步到我们自己的仓库里，&lt;/p&gt;

&lt;p&gt;如果后面Flink发布了1.5.4的小版本，也会合并到1.5的分支上，我们只需要同步这些更新到我们&lt;/p&gt;

&lt;p&gt;的仓库即可。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;打包&lt;/h2&gt;

&lt;p&gt;Flink官网给了一个打包的命令，在我和同事的笔记本上执行了一下，大概20分钟左右。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn package -DskipTests -Dhadoop.version=2.7.X

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因为初步接触Flink，我们打包非常频繁，调试一些问题增加日志之类的需求，所以这个打包&lt;/p&gt;

&lt;p&gt;的速度是无法接受的，大概分析了一下他的打包过程，于是修改了一下打包的命令。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn package -DskipTests -Dcheckstyle.skip=true -Dhadoop.version=2.7.X
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;增加了忽略checkstyple过程，速度提升了一倍，十分钟左右可以打包完成。&lt;/p&gt;

&lt;p&gt;如果你还想继续加速打包，可以考虑对pom进行裁剪，比如你不用mesos、yarn这些模块，&lt;/p&gt;

&lt;p&gt;或者你不需要各种connect，也是可以忽略的。但是注意maven的依赖，忽略的子项目有可能&lt;/p&gt;

&lt;p&gt;包含了Flink必须的一些依赖包，而且Flink的pom中大量的使用了shade，处理起来非常麻烦。&lt;/p&gt;

&lt;p&gt;注意，如果你在主POM里裁剪掉了部分的module，一定要记得在dist子项目中也去掉相关的&lt;/p&gt;

&lt;p&gt;dependency，要不然它会从maven仓库再下载一份。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;类冲突&lt;/h2&gt;

&lt;p&gt;测试自定义版Flink的时候，我们与类冲突搏斗了三四天，主要的报错是noclassdeffounderror。&lt;/p&gt;

&lt;p&gt;网上搜索相关错误，会告诉你与此类的static部分有关系，我们碰到的问题大多是hadoop有关的，&lt;/p&gt;

&lt;p&gt;每次处理hadoop的依赖都是一万个XXX。因为公司的现状，我们需要使用定制化的hadoop。&lt;/p&gt;

&lt;p&gt;最终我们在原版打包的基础上，通过控制classpath里jar的顺序，将公司的hdfs替换上去了。&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Sep 2018 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2018-09-13-flink2</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2018-09-13-flink2</guid>
        
        
        <category>flink</category>
        
      </item>
    
  </channel>
</rss>
