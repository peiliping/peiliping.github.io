<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pei LiPing's Blog</title>
    <description>Augur
</description>
    <link>http://peiliping.github.io/blog/</link>
    <atom:link href="http://peiliping.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 14 Sep 2018 14:04:28 +0800</pubDate>
    <lastBuildDate>Fri, 14 Sep 2018 14:04:28 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>初识flink2</title>
        <description>&lt;p&gt;续上一篇Blog，我们从网上下载二进制的Flink包，在其外围进行一些脚本改造，&lt;/p&gt;

&lt;p&gt;docker镜像的开发，可以让我们把Flink在K8s上跑起来了，接下来就是要接触Flink的源码了。&lt;/p&gt;

&lt;p&gt;说道源码还是挺头大的一个事，目前apache下面的跟大数据相关的项目你下载下来就会发现&lt;/p&gt;

&lt;p&gt;子项目子模块非常多，maven编译一下少说十几分钟，hadoop这种级别的项目编译1个小时都正常。&lt;/p&gt;

&lt;h2 id=&quot;flink&quot;&gt;Flink分支&lt;/h2&gt;

&lt;p&gt;将Flink从Git上clone下来，选择一个你中意的分支或者tag，注意Flink的分支和tag的命名规则。&lt;/p&gt;

&lt;p&gt;因为我们后面要持续对Flink进行开发，而且要不断合并社区的更新，这里需要一些git的技巧。&lt;/p&gt;

&lt;p&gt;我们主要是在1.5.X这个系列上进行开发，所以将Flink项目的1.5分支同步到我们自己的仓库里，&lt;/p&gt;

&lt;p&gt;如果后面Flink发布了1.5.4的小版本，也会合并到1.5的分支上，我们只需要同步这些更新到我们&lt;/p&gt;

&lt;p&gt;的仓库即可。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;打包&lt;/h2&gt;

&lt;p&gt;Flink官网给了一个打包的命令，在我和同事的笔记本上执行了一下，大概20分钟左右。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn package -DskipTests -Dhadoop.version=2.7.X

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因为初步接触Flink，我们打包非常频繁，调试一些问题增加日志之类的需求，所以这个打包&lt;/p&gt;

&lt;p&gt;的速度是无法接受的，大概分析了一下他的打包过程，于是修改了一下打包的命令。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn package -DskipTests -Dcheckstyle.skip=true -Dhadoop.version=2.7.X
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;增加了忽略checkstyple过程，速度提升了一倍，十分钟左右可以打包完成。&lt;/p&gt;

&lt;p&gt;如果你还想继续加速打包，可以考虑对pom进行裁剪，比如你不用mesos、yarn这些模块，&lt;/p&gt;

&lt;p&gt;或者你不需要各种connect，也是可以忽略的。但是注意maven的依赖，忽略的子项目有可能&lt;/p&gt;

&lt;p&gt;包含了Flink必须的一些依赖包，而且Flink的pom中大量的使用了shade，处理起来非常麻烦。&lt;/p&gt;

&lt;p&gt;注意，如果你在主POM里裁剪掉了部分的module，一定要记得在dist子项目中也去掉相关的&lt;/p&gt;

&lt;p&gt;dependency，要不然它会从maven仓库再下载一份。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;类冲突&lt;/h2&gt;

&lt;p&gt;测试自定义版Flink的时候，我们与类冲突搏斗了三四天，主要的报错是noclassdeffounderror。&lt;/p&gt;

&lt;p&gt;网上搜索相关错误，会告诉你与此类的static部分有关系，我们碰到的问题大多是hadoop有关的，&lt;/p&gt;

&lt;p&gt;每次处理hadoop的依赖都是一万个XXX。因为公司的现状，我们需要使用定制化的hadoop。&lt;/p&gt;

&lt;p&gt;最终我们在原版打包的基础上，通过控制classpath里jar的顺序，将公司的hdfs替换上去了。&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Sep 2018 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2018-09-13-flink2</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2018-09-13-flink2</guid>
        
        
        <category>flink</category>
        
      </item>
    
      <item>
        <title>初识flink</title>
        <description>&lt;p&gt;2016年的时候，开始关注flink，觉得是一个非常不错的流计算项目，当时也做了一些简单的demo，&lt;/p&gt;

&lt;p&gt;了解其简单的应用，之后的两年里flink社区发展迅猛，包括阿里的强力支撑blink，在稳定性和性能&lt;/p&gt;

&lt;p&gt;方面都有很大的提升，8月份我们开始筹划上线flink on k8s服务，做了一些基础性的调研工作。&lt;/p&gt;

&lt;h2 id=&quot;flink-on-k8s&quot;&gt;flink on k8s&lt;/h2&gt;

&lt;p&gt;我们在github上搜索了不少关于flink on k8s的资料，基本上都不太靠谱，所以基础镜像方面我们&lt;/p&gt;

&lt;p&gt;是自己制作的，这个过程非常耗时，但事后来看非常的必要，我们对flink有了更为深入的了解。&lt;/p&gt;

&lt;p&gt;jobmanager和taskmanager我们是分为2个deployment，跟唯品会的方案不太相同（statefulset）。&lt;/p&gt;

&lt;p&gt;我们将flink的shell脚本、yaml配置等内容进行了通读，对其参数做了详细的标注，最后将这些&lt;/p&gt;

&lt;p&gt;参数进行合并，整理出大概20多个有效配置项和默认值，之后我们又将这些参数进行分类，大致分为&lt;/p&gt;

&lt;p&gt;两类：容器级参数和业务参数。&lt;/p&gt;

&lt;p&gt;举个例子：容器内存大小就属于容器级别参数，集群名称也属于容器级参数（相当于deploymentname）。&lt;/p&gt;

&lt;p&gt;每个taskmanager有多少个slot，就属于业务参数。jvm的各种堆大小属于容器内存大小的衍生参数，&lt;/p&gt;

&lt;p&gt;有一个统一的计算公式得到，并不进行传递。&lt;/p&gt;

&lt;p&gt;容器级别的参数由docker的env进行传递，业务参数通过http接口获得。&lt;/p&gt;

&lt;p&gt;所以我们的docker启动时，首先获取env中的参数，然后通过脚本调http接口获得一个json，再结合&lt;/p&gt;

&lt;p&gt;本地的default.property文件中的默认值，进行合并，最后渲染配置文件和shell脚本，这里用了一个&lt;/p&gt;

&lt;p&gt;python的模板引擎，类似javaweb中的velocity，freemaker等。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;联通&lt;/h2&gt;

&lt;p&gt;flinkjobmanager的HA是通过zk来实现的，taskmanager和jobmanager之间的服务发现也要基于zk，&lt;/p&gt;

&lt;p&gt;所以在docker模式下是可以很容易组成集群的。比较麻烦的一个问题是jobmanager的webui port，&lt;/p&gt;

&lt;p&gt;由于我们的k8s上是使用物理机IP的，所以port是非常宝贵的资源，如果我们的port只能使用固定的端口，&lt;/p&gt;

&lt;p&gt;意味着一台物理机只能启动一个jobmanager，所以在启动docker时，我们要指定要container的port，&lt;/p&gt;

&lt;p&gt;这样k8s就能根据port来调度，不会发生冲突。为了解决port资源的问题，我们向k8s申请了专用port范围，&lt;/p&gt;

&lt;p&gt;我们的集群随机从范围里选择一个port来启动任务。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;内存使用比率&lt;/h2&gt;

&lt;p&gt;内存比例相关的参数是我们调试最多的一个环节，flink启动脚本中关于内存的计算非常复杂，&lt;/p&gt;

&lt;p&gt;下面列举一些核心的点：&lt;/p&gt;

&lt;p&gt;networkbuffer的大小&lt;/p&gt;

&lt;p&gt;是否使用堆外内存来支持flink框架的计算逻辑&lt;/p&gt;

&lt;p&gt;堆外与堆内的分配比例&lt;/p&gt;

&lt;p&gt;jvm各个分代的大小&lt;/p&gt;

&lt;p&gt;垃圾回收器的选择&lt;/p&gt;

</description>
        <pubDate>Sun, 19 Aug 2018 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2018-08-19-flink</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2018-08-19-flink</guid>
        
        
        <category>flink</category>
        
      </item>
    
      <item>
        <title>估算Job的余量</title>
        <description>&lt;p&gt;在运维日志分发任务的时候，经常碰到一些突发性的数据量增大，导致分发资源不足，最后数据延迟了。&lt;/p&gt;

&lt;p&gt;之前，只能依赖监控Kafka的消息积压情况，如果积压非常多，就增加任务的副本数或者增大任务的&lt;/p&gt;

&lt;p&gt;资源规格（分配更多的cpu和内存）。增加多少副本或者资源只能凭经验去判断，无法量化，每个任务的&lt;/p&gt;

&lt;p&gt;数据单条大小是不一样的，连接的HDFS集群也是不一样的，所处的网络环境也会有差异，这些变量都&lt;/p&gt;

&lt;p&gt;导致了无法用一个固定的指标衡量或者预警。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;自旋时间&lt;/h2&gt;

&lt;p&gt;经过一段时间的思考和测试我们选择了一个叫做自旋时间的指标来做衡量。&lt;/p&gt;

&lt;p&gt;我们的任务中使用了ringbuffer作为生产消费模型中的缓冲队列，在高资源规格的任务中，会有多个&lt;/p&gt;

&lt;p&gt;并行的ringbuffer。之前我的blog提到过，我们在选择哪一条channel时有一个复合策略，就是roundrobin&lt;/p&gt;

&lt;p&gt;+余量最大。当source下游的所有ringbuffer都处于full状态时，source就一直处于wait状态（自旋），&lt;/p&gt;

&lt;p&gt;这个自旋的时间被我们统计了下来，通过nanotime的delta来统计。如果每分钟里自旋的累加时间超过5s，&lt;/p&gt;

&lt;p&gt;我们就会认为该任务的消费能力低于生产能力，需要扩大资源规格，具体含义就是写HDFS的性能低于拉&lt;/p&gt;

&lt;p&gt;kafka的性能。在我们的测试中，3个channel同时写HDFS，能超过单线程拉kafka的速度。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;告警的策略&lt;/h2&gt;

&lt;p&gt;有一些kafka的数据是定期上报的，所以会存在短期数据量很大的情况，如果我们设置的报警策略非常敏感&lt;/p&gt;

&lt;p&gt;的话，会导致频繁告警，所以经过一段时间的微调，我们最终选定15分钟内有10次超过5s的自旋，就任务&lt;/p&gt;

&lt;p&gt;该任务需要增加资源规格了。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;副本与资源规格&lt;/h2&gt;

&lt;p&gt;需要注意的是增加副本和增加资源规格其实都能达到降低任务繁忙度的目的，但是增加资源规格从整体&lt;/p&gt;

&lt;p&gt;上来说是更为经济的选择，增加副本还依赖于kafka的partition数量。&lt;/p&gt;

&lt;p&gt;在运维这批任务的时候，我们会有一个基本的原则：&lt;/p&gt;

&lt;p&gt;1、副本数不超过kafka分区数的二分之一，保证至少还有一倍的临时扩容余量。&lt;/p&gt;

&lt;p&gt;2、如果是单副本任务，优先增加副本。&lt;/p&gt;

&lt;p&gt;3、副本数超过5个的话，尽量扩资源规格。&lt;/p&gt;

&lt;p&gt;4、如果单个任务平均每秒处理的数据超过50m，则选择增加副本数量。&lt;/p&gt;

&lt;p&gt;另外，这个自旋时间并不能替代数据延迟的告警，只是用来衡量单任务是否达到性能瓶颈。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;未来&lt;/h2&gt;

&lt;p&gt;这些扩容的规则还在慢慢积累，不断的在增加Metric的丰富度，希望未来可以通过对metric的实时处理，&lt;/p&gt;

&lt;p&gt;得到运营决策，将系统的运营工作自动化起来。&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Jul 2018 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2018-07-01-spin</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2018-07-01-spin</guid>
        
        
        <category>scale</category>
        
        <category>spin</category>
        
      </item>
    
      <item>
        <title>618备战</title>
        <description>&lt;p&gt;在JD第一次参加了大促的备战工作，我所负责的系统也要应对618当天的流量洪峰。&lt;/p&gt;

&lt;p&gt;这半年开发的三个实时相关的工具都上线了，binlog采集、准实时hive表数据、日志分发。&lt;/p&gt;

&lt;p&gt;在618备战期间，我对这半年的开发有很多的思考，主要是平台运营、工具特性，性能与监控等方面。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;平台型和工具型&lt;/h2&gt;

&lt;p&gt;作为一个工具，你可以只关心功能，关心配置的灵活度，水平扩展能力和性能的极限。&lt;/p&gt;

&lt;p&gt;但是作为一个平台型的东西，这些是远远不够的。&lt;/p&gt;

&lt;p&gt;比如平台上的任务一定是绝大多数任务压力很小，有少数任务流量压力很大。&lt;/p&gt;

&lt;p&gt;业务上也会出现，某些任务只在一些特定的时间流量压力大，而其他时间流量很低。&lt;/p&gt;

&lt;p&gt;数据的表现上有条数多，或者单条体积大。甚至还要考虑有一些任务所使用的网络比其他任务要差一些。&lt;/p&gt;

&lt;p&gt;单从工具的角度来说，我们的三个tool的表现都非常优异，每种任务都可以使用3-4个性能档位配置，&lt;/p&gt;

&lt;p&gt;工具的配置非常灵活，暴露的可调节的参数也非常多，核心逻辑采用状态机等设计模式，&lt;/p&gt;

&lt;p&gt;非常好的兼容能力。性能上也做了诸多优化，binlog采集的性能甚至超过了正常从库同步的性能。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;临时解决问题&lt;/h2&gt;

&lt;p&gt;在任务上线的初期，经历了两周的阵痛，每天都有很多细碎的问题，比如某些任务延迟了，&lt;/p&gt;

&lt;p&gt;某些任务长时间无流量，某些任务经常报错等等。经过两周对监控的调整，大大降低了告警的次数，&lt;/p&gt;

&lt;p&gt;并且摸索出一套简单的运营办法，可以解决绝大多数问题。但是偶尔还是会有特例，&lt;/p&gt;

&lt;p&gt;在备战618的过程中，还是需要花非常多的时间去梳理核心任务和数据量大的任务，提前进行扩容。&lt;/p&gt;

&lt;p&gt;甚至在618前的一两个小时里，我们还在梳理增长迅猛的任务，并适当的扩容。&lt;/p&gt;

&lt;p&gt;这种工作无论你花多少时间，多么有耐心，还是会有遗漏的情况，因为这些都是实时数据或者&lt;/p&gt;

&lt;p&gt;准实时数据，临时人工处理一定已经晚了。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;基础准备&lt;/h2&gt;

&lt;p&gt;因为现实业务上的复杂性，所以我们的任务本身需要做一些基础的准备。&lt;/p&gt;

&lt;p&gt;第一、做好水平扩展能力，可以通过增加一个docker副本来实现性能的水平扩展。&lt;/p&gt;

&lt;p&gt;第二、当不能通过水平扩展提升能力时，可以通过增加资源来提供能力，比如cpu、mem。&lt;/p&gt;

&lt;p&gt;其实很多业务系统经常是增加了资源并不能提升处理能力，或者说不满足预期。&lt;/p&gt;

&lt;p&gt;第三、Job本身能够估算出自己的余量，这一点非常重要，能做到这一点的少之又少。&lt;/p&gt;

&lt;p&gt;第四、能够借助像docker、k8s等方式对运行时环境进行管理。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;未来&lt;/h2&gt;

&lt;p&gt;在产品端开发和运行时任务之间应该有一个运营质量管理系统，将监控和伸缩容量等结合起来，&lt;/p&gt;

&lt;p&gt;通过规则集或者AI相关技术，来解决需要大量人力时间的工作。&lt;/p&gt;

&lt;p&gt;在docker盛行的年代，传统运维方式发生了变化，监控也随之发生了变化，&lt;/p&gt;

&lt;p&gt;同样运营方法也在产生着巨大的变化，接来下几个月我会投入Flink相关的开发工作中，&lt;/p&gt;

&lt;p&gt;建设一个实时计算的平台，运营的实时化问题，会被我当成一个业务场景来对待，&lt;/p&gt;

&lt;p&gt;希望今年年底前能够彻底拜托人工运营的现状。&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Jun 2018 20:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2018-06-16-618</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2018-06-16-618</guid>
        
        
        <category>618</category>
        
      </item>
    
      <item>
        <title>聊聊对channel的认识</title>
        <description>&lt;p&gt;今天聊一聊channel的话题，最近几年从事的工作内容都跟消息流和数据通道有关系，&lt;/p&gt;

&lt;p&gt;结合最近项目的调优，说说我对channel的认识。&lt;/p&gt;

&lt;h2 id=&quot;ringbuffer&quot;&gt;ringbuffer&lt;/h2&gt;

&lt;p&gt;说到channel，就不能不提disrupter的ringbuffer，最近几年非常热门的开源项目。&lt;/p&gt;

&lt;p&gt;ringbuffer强调对象的高度复用，减少GC的次数，有无数据的timeout的回调，方便实现batch逻辑，&lt;/p&gt;

&lt;p&gt;多种策略的选择，应对多种业务时效场景。&lt;/p&gt;

&lt;h2 id=&quot;selector&quot;&gt;selector&lt;/h2&gt;

&lt;p&gt;无论是实时流计算，还是消息通道，都会有一个类似selector的组件，基于某些字段对消息进行分类，&lt;/p&gt;

&lt;p&gt;将event投递到不同的channel中，主要是为了解决一定程度的顺序问题，&lt;/p&gt;

&lt;p&gt;比如将相同主键的消息顺序输出。flume中的selector就是针对header中的某个key进行mapping，&lt;/p&gt;

&lt;p&gt;实现了灵活强大的分流功能。当然使用key也尽量不要出现热点，要不然整体的消费能力就会提早到达瓶颈。&lt;/p&gt;

&lt;h2 id=&quot;broadcast&quot;&gt;broadcast&lt;/h2&gt;

&lt;p&gt;broadcast功能在channel中也是非常实用的，比如checkpoint相关的event向下游传递，如果下游有&lt;/p&gt;

&lt;p&gt;多个channel，那么就需要一个broadcast功能。在业务中broadcast的应用也非常广，比如上游计算&lt;/p&gt;

&lt;p&gt;导致了某种meta信息的变更，就可以通过broadcast的功能通知下游，这种方式比借助外部存储要高效的多，&lt;/p&gt;

&lt;p&gt;而且天然不用解决多version的问题。&lt;/p&gt;

&lt;h2 id=&quot;balance&quot;&gt;balance&lt;/h2&gt;

&lt;p&gt;如果你碰到了一拆N的channel场景，并且对数据的顺序不那么敏感时，肯定希望能最大限度的发挥下游&lt;/p&gt;

&lt;p&gt;channel的能力，很多人都在selector上选择roundrobin，或者是基于timestamp取模的方法，如果下游&lt;/p&gt;

&lt;p&gt;的消费能力非常强，这种做法是没有问题的。但如果你在下游sink是重IO类型的，这种做法就不会达到&lt;/p&gt;

&lt;p&gt;你想要的效果了。你会发现流经常会因为某一条下游的blocking，导致整条链路卡主，你使用了多条通道&lt;/p&gt;

&lt;p&gt;，但性能并没有成线性增长。这个问题在我的分发kafka消息至hdfs时就碰到了，一旦HDFS的响应速度下降&lt;/p&gt;

&lt;p&gt;整个job的吞吐量大大降低，增加channel并没有解决这个问题，只能增加jvm实例来解决，非常耗资源。&lt;/p&gt;

&lt;p&gt;这时，你需要的是类似负载均衡方面的WLC算法的解决方案。首先，你需要让下游的channel暴露出自己&lt;/p&gt;

&lt;p&gt;的余量。然后根据余量的情况选择最为空闲的节点，这样你增加的channel才会有意义。当然如果你有&lt;/p&gt;

&lt;p&gt;大量的broadcast消息，也会极大的影响你的性能。&lt;/p&gt;
</description>
        <pubDate>Thu, 10 May 2018 18:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2018-05-10-channel</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2018-05-10-channel</guid>
        
        
        <category>channel</category>
        
        <category>hdfs</category>
        
        <category>kafka</category>
        
      </item>
    
      <item>
        <title>项目问题总结</title>
        <description>&lt;p&gt;之前做的几个项目陆续上线了，碰到了不少稀奇古怪的问题，还有一些运营的问题，这里总结一下。&lt;/p&gt;

&lt;h2 id=&quot;mysql&quot;&gt;mysql字段类型&lt;/h2&gt;

&lt;p&gt;之前binlog测试都还算顺利，上线后发现了一些不常用的字段类型没有覆盖到，导致了一些数据异常。&lt;/p&gt;

&lt;h3 id=&quot;bit&quot;&gt;Bit&lt;/h3&gt;

&lt;p&gt;mysql的bit类型字段在binlog中解析出来默认是bitset，按照默认逻辑tostring的话会输出{0,1}。&lt;/p&gt;

&lt;p&gt;canal的处理是把bitset转成long型，也就是把bitset转为long就可以了。&lt;/p&gt;

&lt;h3 id=&quot;enum&quot;&gt;enum&lt;/h3&gt;

&lt;p&gt;mysql的enum类型之前我是从来没有用过的，这次也碰到了。enum类型的字段在JDBC中是char，&lt;/p&gt;

&lt;p&gt;所以需要在char类型中做一下区分。&lt;/p&gt;

&lt;h2 id=&quot;kafka-consumer&quot;&gt;监控kafka consumer&lt;/h2&gt;

&lt;p&gt;消费kafka都需要关注积压情况，以此来判断是否需要扩分区或者是消费者。&lt;/p&gt;

&lt;p&gt;普遍的做法是关注生产的offset和消费者的offset差，有不少开源的监控工具都是这样做的。&lt;/p&gt;

&lt;p&gt;然后根据经验设定一个阈值，超过了就告警。&lt;/p&gt;

&lt;p&gt;但是这个阈值的设定非常繁琐，阈值的大小与业务量的大小有关，跟提交offset的频率有关，&lt;/p&gt;

&lt;p&gt;跟监控程序扫描的频率有关，大多数阈值设定都非常大，灵敏度不高。&lt;/p&gt;

&lt;p&gt;我新上线的几个系统都是使用消费延迟时间来做告警的，在数据写入kafka（0.10以上的版本）的时候，&lt;/p&gt;

&lt;p&gt;将timestamp设定为当前时间，或者是一个业务时间。消费kafka的consumer，按照Partition做一个统计，&lt;/p&gt;

&lt;p&gt;consumer端将消费的数据时间戳和当前时间进行比对，来判断是否延迟，如果连续几分钟监控的延迟都&lt;/p&gt;

&lt;p&gt;大于10分钟，那么就认定程序当前消费能力不足，需要增加副本数来解决。&lt;/p&gt;

&lt;p&gt;如果你使用的kafka是0.8.2的话，没有timestamp的位置，可以通过key来传递。&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Apr 2018 15:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2018-04-15-maintain</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2018-04-15-maintain</guid>
        
        
        <category>mysqlbinlog</category>
        
        <category>log</category>
        
        <category>hdfs</category>
        
        <category>kafka</category>
        
      </item>
    
      <item>
        <title>MysqlBinlog中的事务</title>
        <description>&lt;p&gt;binlog抽取的项目测试了一段时间，一直都很顺利，最近扩大了测试的规模，发现了一些细节问题。&lt;/p&gt;

&lt;h2 id=&quot;transactiontableid&quot;&gt;Transaction中的TableId&lt;/h2&gt;

&lt;p&gt;在binlog中有一个TableId字段，主要是用来关联TableMap和之后的RowEvent的。如果你在搜索引擎&lt;/p&gt;

&lt;p&gt;中搜索关于TableId的信息，会找到很多于此有关的Bug和故障，比如超过Int的最大值。这些细节就&lt;/p&gt;

&lt;p&gt;不再这里赘述了，总之在一个binlog局部片段中TableMap和RowEvent需要TableId进行关联。&lt;/p&gt;

&lt;p&gt;最初我们的代码是这样处理的，当遇到TableMapEvent就把它赋值给一个成员变量tablemap，&lt;/p&gt;

&lt;p&gt;遇到XIDEvent就让tablemap=null。这样处理其实是假定单一事务内只有一个tablemap，&lt;/p&gt;

&lt;p&gt;但这是不正确的。在一个事务里有可能碰到多个tablemap：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
tablemap(id=7000)

tablemap(id=7002)

rowdata(id=7000)

rowdata(id=7002)

xid

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样就会导致第二条rowdata匹配了错误的tablemap，也就无法对数据进行有效的解析了。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;解决办法&lt;/h2&gt;

&lt;p&gt;为了解决这个问题我们翻看了canal和其他几个binlog处理的开源项目代码，大体解决方案为两类。&lt;/p&gt;

&lt;p&gt;1、用一个Hashmap把TableId和Tablemap缓存下来，当事务结束后，将mapclear掉。&lt;/p&gt;

&lt;p&gt;2、用一个全局的map将TableId和TableMapCache下来。&lt;/p&gt;

&lt;p&gt;方案二显然是有问题的，因为TableId并非有限范围，随着时间的累计会导致OOM。&lt;/p&gt;

&lt;p&gt;方案一是一个有效方案但是效率并不是特别高。&lt;/p&gt;

&lt;p&gt;在方案一的基础上我们做了一些改进：&lt;/p&gt;

&lt;p&gt;1、保留我们的tablemap成员对象，用来cache一个事务中的第一个tablemap，这个其实非常必要，&lt;/p&gt;

&lt;p&gt;这个tablemap的binlog位置会成为后面事务中其他数据的offset，可以作为有效的回退位点。&lt;/p&gt;

&lt;p&gt;2、再增加一个hashmap成员变量cache，当tablemap!=null并且当前event的type为tablemap时，&lt;/p&gt;

&lt;p&gt;判断TableId是不是相等的，如果不相等，将tablemap缓存到cache中，key为tableid。&lt;/p&gt;

&lt;p&gt;3、当event类型为row时，判断tableid与tablemap的tableid是不是相等，如果相等则用tablemap。&lt;/p&gt;

&lt;p&gt;如果不相等，就从cache中查找一个tablemap。&lt;/p&gt;

&lt;p&gt;4、当event类型为xid时，tablemap=null，cache.clear()&lt;/p&gt;

&lt;p&gt;这样在绝大多数情况下，不会启动hashmap，几乎不会产生额外的开销。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
 	EventType eventType = event.getHeader().getEventType();
        long dataTableId;
        switch (eventType) {
            case PRE_GA_WRITE_ROWS:
            case WRITE_ROWS:
            case EXT_WRITE_ROWS:
                dataTableId = ((WriteRowsEventData) event.getData()).getTableId();
                break;
            case PRE_GA_UPDATE_ROWS:
            case UPDATE_ROWS:
            case EXT_UPDATE_ROWS:
                dataTableId = ((UpdateRowsEventData) event.getData()).getTableId();
                break;
            case PRE_GA_DELETE_ROWS:
            case DELETE_ROWS:
            case EXT_DELETE_ROWS:
                dataTableId = ((DeleteRowsEventData) event.getData()).getTableId();
                break;
            case TABLE_MAP:
                dataTableId = ((TableMapEventData) event.getData()).getTableId();
                if (this.tableMapEvent == null) {
                    this.tableMapEvent = event;
                } else if (dataTableId != ((TableMapEventData) this.tableMapEvent.getData()).getTableId()) {
                    this.cacheTableMapEvent4Transaction.put(dataTableId, event);
                }
                this.binlogFileName = this.mysqlClient.getBinlogFilename();
                this.binlogPosition = ((EventHeaderV4) event.getHeader()).getPosition();
                getCounter().notRowSum.incrementAndGet();
                return;
            case XID:
                this.tableMapEvent = null;
                this.cacheTableMapEvent4Transaction.clear();
                getCounter().notRowSum.incrementAndGet();
                return;
            default:
                getCounter().notRowSum.incrementAndGet();
                return;
        }

        if (((TableMapEventData) this.tableMapEvent.getData()).getTableId() == dataTableId) {
            container.setPre(Validate.notNull(this.tableMapEvent));
        } else {
            Event e = this.cacheTableMapEvent4Transaction.get(dataTableId);
            container.setPre(Validate.notNull(e));
        }

        container.setCur(event);


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 22 Mar 2018 13:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2018-03-22-binlogtransaction</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2018-03-22-binlogtransaction</guid>
        
        
        <category>mysqlbinlog</category>
        
        <category>transaction</category>
        
      </item>
    
      <item>
        <title>分发log数据到HDFS</title>
        <description>&lt;p&gt;将Kafka中的数据分发到HDFS上，提到这个需求首先想到的就是Flume。&lt;/p&gt;

&lt;p&gt;之前我也在Flume上做了很多改进来提高性能，因为整体框架的约束，只是修改一些皮毛。&lt;/p&gt;

&lt;p&gt;最近正好做了一个log分发的项目，作用和Flume非常相似，初步性能测试比Flume快很多。&lt;/p&gt;

&lt;p&gt;每秒钟可以从Kafka拉取300M的数据，写HDFS也大概了每秒100M。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;切换用户&lt;/h2&gt;

&lt;p&gt;HDFS一般都有权限管理，最常见的就是用用户名，假设写HDFS的程序所在的linux用户叫flume，&lt;/p&gt;

&lt;p&gt;那么HDFS上的文件用户名就是flume。为了方便管理我们的程序肯定是统一使用一个用户来启动的，&lt;/p&gt;

&lt;p&gt;这就需要切换  System.setProperty(“HADOOP_USER_NAME”, this.userName);&lt;/p&gt;

&lt;p&gt;在适当的时候执行以上语句，就可以达到切换用户的效果，当然还有其他办法,就不一一介绍了。&lt;/p&gt;

&lt;h2 id=&quot;codec&quot;&gt;Codec&lt;/h2&gt;

&lt;p&gt;绝大多数公司写入HDFS上的数据都会经过压缩，常见的如snappy，lzo，gzip等等，&lt;/p&gt;

&lt;p&gt;为了灵活方便，程序里通过配置来选择压缩工具，类似SPI的一种机制。&lt;/p&gt;

&lt;p&gt;其中值得注意的是lzo和lzop需要单独配置一下。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
List&amp;lt;Class&amp;lt;? extends CompressionCodec&amp;gt;&amp;gt; codecs = CompressionCodecFactory.getCodecClasses(conf);
codecs.add(LzoCodec.class);
codecs.add(LzopCodec.class);

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;sync&quot;&gt;sync&lt;/h2&gt;

&lt;p&gt;HDFS上一般一个block大小是128M左右，所以我们在写文件的过程中一定会sync一下，&lt;/p&gt;

&lt;p&gt;HDFS的FileSystem API中关于sync有好多种，我们参照Flume选择了hflush，性能还是非常不错的。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;分区&lt;/h2&gt;

&lt;p&gt;之前介绍过Flume的路径渲染极大影响了它的吞吐能力，在我们的程序中也极力避免复杂的路径渲染，&lt;/p&gt;

&lt;p&gt;比如单sink同时只能写一个文件等，但是分区路径的渲染还是避免不掉的，常见的分区有小时分区和天分区。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public enum PartitionType {

    DAY {
        @Override
        public PartitionRender newInstance() {
            return new DayPartitionRender();
        }
    }, HOUR {
        @Override
        public PartitionRender newInstance() {
            return new DayHourPartitionRender();
        }
    };

    public abstract PartitionRender newInstance();

    public abstract class PartitionRender {

        public abstract void render(StringBuilder base);

    }

    public class DayPartitionRender extends PartitionRender {

        private SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;/'dt'=yyyy-MM-dd/HH-mm-&quot;);

        @Override
        public void render(StringBuilder base) {
            base.append(simpleDateFormat.format(new Date()));
        }
    }

    public class DayHourPartitionRender extends PartitionRender {

        private SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;/'dt'=yyyy-MM-dd/'ht'=HH/HH-mm-&quot;);

        @Override
        public void render(StringBuilder base) {
            base.append(simpleDateFormat.format(new Date()));
        }
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过一个简单的枚举解决。&lt;/p&gt;

</description>
        <pubDate>Sun, 25 Feb 2018 13:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2018-02-25-hdfswriter</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2018-02-25-hdfswriter</guid>
        
        
        <category>hdfs</category>
        
        <category>log</category>
        
        <category>flume</category>
        
      </item>
    
      <item>
        <title>类型转换</title>
        <description>&lt;p&gt;之前几个月一直在忙一个binlog抽取的项目，将mysqlbinlog拉出来，写入kafka，&lt;/p&gt;

&lt;p&gt;之后消费kafka中的数据写到HDFS，文件格式为orcfile+snappy。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;上一篇blog讲过kafka中的数据是以avro为载体的，其中的数据字段存在一个map中，&lt;/p&gt;

&lt;p&gt;map的key和value都是charsequence，也就是说我们的数据在经过avro之后失去了类型信息。&lt;/p&gt;

&lt;p&gt;我们的目标端是写入hdfs上的orcFile，如果是写sequencefile，基本上我们就不关心类型了。&lt;/p&gt;

&lt;p&gt;阿里早期的数据仓库中，几乎所有的字段类型都是string的，这样做显然会有空间的浪费，&lt;/p&gt;

&lt;p&gt;但也比较方便，不容易出错，方便管理。在前一家公司里，我负责的离线数据都是以parquet为主的，&lt;/p&gt;

&lt;p&gt;orc相比parquet查询的性能会更快一些。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;类型转换&lt;/h2&gt;

&lt;p&gt;orc是有字段类型概念的，那么我们如何将string转成具体的类型呢？&lt;/p&gt;

&lt;p&gt;首先我们要知道原始类型（mysql中的类型），还要知道hive表中的字段类型（orc类型）。&lt;/p&gt;

&lt;p&gt;知道了这两端的类型，我们就有可能完成这个工作了。最简单的处理办法就是笛卡尔积。&lt;/p&gt;

&lt;p&gt;把每种组合的处理函数写好，进行配置就可以了。这样做的缺点非常明显，就是工作量大。&lt;/p&gt;

&lt;p&gt;如果有一天我们不再使用orc格式的类型，换成parquet或者其他的，那么还需要大量的重复工作。&lt;/p&gt;

&lt;p&gt;于是解决这个问题的关键是降低耦合度，降低复杂度。&lt;/p&gt;

&lt;p&gt;之前在阅读阿里开源的datax的时候看到过一个类似问题的解决方案，引入状态机。&lt;/p&gt;

&lt;p&gt;mysql的常见字段类型大概不到20种，为每种类型创建一个type类，并提供转成其他类型的方法。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface JavaType {

    Boolean toBoolean(String value);

    Integer toInt(String value);

    Long toLong(String value);

    Date toDate(String value);

    Float toFloat(String value);

    Double toDouble(String value);

    default String toString(String value) {
        return value;
    }

    default void unsupport() {
        throw new RuntimeException(&quot;type error&quot;);
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;碰到把boolean转date显然是不可能实现的，那么就直接unsupport好了。&lt;/p&gt;

&lt;p&gt;接下来解决orc端的问题&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; TINYINT(new C_LongColumnVector()) {
        @Override
        public TypeDescription toOrcTypeDescption() {
            return TypeDescription.createByte();
        }
    }, SMALLINT(new C_LongColumnVector()) {
        @Override
        public TypeDescription toOrcTypeDescption() {
            return TypeDescription.createShort();
        }
    }, INT(new C_LongColumnVector()) {
        @Override
        public TypeDescription toOrcTypeDescption() {
            return TypeDescription.createInt();
        }
    }, BIGINT(new C_LongColumnVector()) {
        @Override
        public TypeDescription toOrcTypeDescption() {
            return TypeDescription.createLong();
        }
    }, BOOLEAN(new C_BooleanColumnVector()) {
        @Override
        public TypeDescription toOrcTypeDescption() {
            return TypeDescription.createBoolean();
        }
    }, FLOAT(new C_DoubleColumnVector()) {
        @Override
        public TypeDescription toOrcTypeDescption() {
            return TypeDescription.createFloat();
        }
    }, DOUBLE(new C_DoubleColumnVector()) {
        @Override
        public TypeDescription toOrcTypeDescption() {
            return TypeDescription.createDouble();
        }
    }, DECIMAL(new C_DecimalColumnVector()) {
        @Override
        public TypeDescription toOrcTypeDescption() {
            return TypeDescription.createDecimal();
        }
    }, STRING(new C_BytesColumnVector()) {
        @Override
        public TypeDescription toOrcTypeDescption() {
            return TypeDescription.createString();
        }
    }, BINARY(new C_BytesColumnVector()) {
        @Override
        public TypeDescription toOrcTypeDescption() {
            return TypeDescription.createBinary();
        }
    }, CHAR(new C_BytesColumnVector()) {
        @Override
        public TypeDescription toOrcTypeDescption() {
            return TypeDescription.createChar();
        }
    }, VARCHAR(new C_BytesColumnVector()) {
        @Override
        public TypeDescription toOrcTypeDescption() {
            return TypeDescription.createVarchar();
        }
    }, TIMESTAMP(new C_TimeStampColumnVector()) {
        @Override
        public TypeDescription toOrcTypeDescption() {
            return TypeDescription.createTimestamp();
        }
    }, DATE(new C_DateColumnVector()) {
        @Override
        public TypeDescription toOrcTypeDescption() {
            return TypeDescription.createDate();
        }
    };

    private Convert convert;

    OrcTypeEnum(Convert convert) {
        this.convert = convert;
    }

    public static OrcTypeEnum findType(String type) {
        return OrcTypeEnum.valueOf(type.toUpperCase());
    }

    public abstract TypeDescription toOrcTypeDescption();

    public void setValue(ColumnVector vector, int row, String value, JavaType typeConvert) {
        convert.eval(vector, row, value, typeConvert);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;为orc的每种类型创建一个convert，大概十来种的样子。&lt;/p&gt;

&lt;p&gt;通过这种方式，我们不仅解决了正常的类型转化需求，还能够天然支持date to long 和long to date这样的复杂需求，&lt;/p&gt;

&lt;p&gt;极大的提高了工具的灵活度。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;函数化&lt;/h2&gt;

&lt;p&gt;之前datax的方案是引入一个实体类对原始类型的数据进行包装，如果每一个字段都经过一次包装会严重增加体积，&lt;/p&gt;

&lt;p&gt;ygc的频率会提高，所以在我们的方案中是函数化的，相关类型进行编号，性能也有一些提升。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    public void writeData(List&amp;lt;String&amp;gt; result, List&amp;lt;ColumnInfo&amp;gt; columnInfos, List&amp;lt;JavaType&amp;gt; javaTypeList) {
        int row = this.batch.size++;
        for (int i = 0; i &amp;lt; result.size(); i++) {
            ColumnInfo col = columnInfos.get(i);
            col.getHiveTypeEnum().setValue(batch.cols[i], row, result.get(i), javaTypeList.get(col.getJavaTypeFunctionId()));
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sat, 20 Jan 2018 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2018-01-20-typeconvert</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2018-01-20-typeconvert</guid>
        
        
        <category>type</category>
        
        <category>convert</category>
        
        <category>parser</category>
        
      </item>
    
      <item>
        <title>关于Avro的使用</title>
        <description>&lt;p&gt;14年开始尝试Flume的时候了解到Avro相关的东西，但一直都没有很深入的使用。&lt;/p&gt;

&lt;p&gt;最近在做Binlog采集时，写入Kafka的数据格式要求是Avro，在使用中了解碰到了一些小问题&lt;/p&gt;

&lt;p&gt;在这里分享一下。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;复用&lt;/h2&gt;

&lt;p&gt;序列化和反序列化时需要BinaryEncoder和BinaryDecoder，这个对象是可以反复使用的。&lt;/p&gt;

&lt;p&gt;反序列化接口是支持对象复用的，但是经过测试复用对象性能反而下降了。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;并发&lt;/h2&gt;

&lt;p&gt;序列化和反序列化都需要一个Json格式的Schema信息，或者叫Avsc。&lt;/p&gt;

&lt;p&gt;最开始多线程反序列化Avro数据时，是使用同一个Schema对象的，但是随着线程的增加，&lt;/p&gt;

&lt;p&gt;并发的效率提升并不明显，通过对线程状态的搜索，发现Schema对象上有Sync修饰，&lt;/p&gt;

&lt;p&gt;详见JsonProperties类。解决办法也很简单，每个线程使用一个独立的Schema对象就可以了。&lt;/p&gt;

&lt;h2 id=&quot;avrostring&quot;&gt;Avro中的String&lt;/h2&gt;

&lt;p&gt;Avro中的String可以是Java的String类型，还可以是使实现了CharSequence的UTF8。&lt;/p&gt;

&lt;p&gt;当然UTF8的Charsequence直接tostring就会转为Java的String了，但是Map的key就非常难处理。&lt;/p&gt;

&lt;p&gt;假如你的数据对象中有一个Map的field，并且Map的Key是String，通过get(“abc”)来获取&lt;/p&gt;

&lt;p&gt;value是不可行的，因为”abc”和UTF8(“abc”)的hashcode完全不同。只能遍历老的map，然后&lt;/p&gt;

&lt;p&gt;key.tostring()，再放入一个新的map中去，非常浪费性能。&lt;/p&gt;

&lt;p&gt;Avro是可以声明schema的string是java的string的来解决，还可以复写SpecificDatumReader&lt;/p&gt;

&lt;p&gt;这个类，特殊处理一下readMapKey方法，当是UTF8时调用一下tostring方法，转成java的string。&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Nov 2017 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2017-12-25-avro</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2017-12-25-avro</guid>
        
        
        <category>avro</category>
        
      </item>
    
  </channel>
</rss>
