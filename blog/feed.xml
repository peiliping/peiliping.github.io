<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pei LiPing's Blog</title>
    <description>Augur
</description>
    <link>http://peiliping.github.io/blog/</link>
    <atom:link href="http://peiliping.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 17 Feb 2020 22:18:22 +0800</pubDate>
    <lastBuildDate>Mon, 17 Feb 2020 22:18:22 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>netty</title>
        <description>&lt;p&gt;新年第一篇，写点有关netty和websocket推送相关的。&lt;/p&gt;

&lt;p&gt;这些年用到netty的项目挺多的，但也一直没有仔细研究一下，最近在做websocket的测试，&lt;/p&gt;

&lt;p&gt;所以就用netty分别写了client端和server端，只是一个简单的应用。&lt;/p&gt;

&lt;h2 id=&quot;hydra&quot;&gt;hydra&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/peiliping/hydra&quot;&gt;Hydra&lt;/a&gt; 项目在这里，代码细节我就不介绍了，大家在网上都可以搜到。&lt;/p&gt;

&lt;h2 id=&quot;websocket&quot;&gt;关于websocket的压缩&lt;/h2&gt;

&lt;p&gt;我在性能测试过程中，曾经开启过WebSocketServerCompressionHandler，发生了缓慢内存泄露。&lt;/p&gt;

&lt;p&gt;经排查，Jvm堆内、外都没有问题，但free -m显示的内存剩余一直在降低，直到被OS-Kill掉。&lt;/p&gt;

&lt;p&gt;在netty的git-issue上搜索找到了相关信息（见ISSUE-9803）。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;推送&lt;/h2&gt;

&lt;p&gt;说到推送，肯定会提到socket.io这个项目，这几年非常火，值得研究一下。&lt;/p&gt;

&lt;p&gt;推送里有一个非常常见的问题，就是同一个账号的多端推送。&lt;/p&gt;

&lt;p&gt;举例：你在手机和网页都登录了，当你的账号有新的订单成交时，都应获得通知消息的推送。&lt;/p&gt;

&lt;p&gt;所以在推送服务器的内存中，就要维护一个Map，Key为Uid，Value是多端的Channels集合。&lt;/p&gt;

&lt;p&gt;在编写这段逻辑时，我希望尽量少的使用lock，但是uid所在的entry，需要保持原子性。&lt;/p&gt;

&lt;p&gt;如果手机端退出登录和网页端登录，在同一时刻发生，维护这个channels在map中的原子性就非常困难。&lt;/p&gt;

&lt;p&gt;解决方案有两种：&lt;/p&gt;

&lt;p&gt;1、当channels集合为空时，并不把它从map中remove掉，会导致Map中有一些垃圾信息。&lt;/p&gt;

&lt;p&gt;2、使用ConcurrentSkipListMap来替代Map&amp;lt;String,Set&lt;string&gt;&amp;gt;的嵌套结构。&lt;/string&gt;&lt;/p&gt;

&lt;p&gt;最后我选择了方案2，在Hydra项目中的Server模块ChannelManager中。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;结束&lt;/h2&gt;

&lt;p&gt;疫情还在继续，大家保重。&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Jan 2020 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2020-01-06-netty</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2020-01-06-netty</guid>
        
        
        <category>netty</category>
        
      </item>
    
      <item>
        <title>一点点总结</title>
        <description>&lt;p&gt;写Blog整整三年，虽然质量不高，但贵在坚持。&lt;/p&gt;

&lt;h2 id=&quot;avro&quot;&gt;关于avro的优化&lt;/h2&gt;

&lt;p&gt;之前写了一些关于avro通用数据格式的想法，这里再补充一点，实际应用中对schema进行定义，&lt;/p&gt;

&lt;p&gt;就意味着很高的管理成本，很多采用json或者hashmap为载体的方式可以非常灵活的增减字段，&lt;/p&gt;

&lt;p&gt;但是缺点非常明显，性能较差、丧失类型、数据体较大等。为了解决schema灵活的问题，我的想法&lt;/p&gt;

&lt;p&gt;是在avro的schema中定义一个int类型的字段保存schema的版本号或者hash值，在最后也增加一个&lt;/p&gt;

&lt;p&gt;bytes类型的字段，保存schema列表。这个列表信息可以用一些压缩手段来减少体积。&lt;/p&gt;

&lt;p&gt;schema的变更是比较低频的，所以不用每次都解析，一次解析后复用即可，在没有变更时可以忽略&lt;/p&gt;

&lt;p&gt;对这个schema信息的反序列化。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;关于背压&lt;/h2&gt;

&lt;p&gt;今年也写了好几篇文章来讲述我对背压的理解，无论是flink，还是自研的fregata。&lt;/p&gt;

&lt;p&gt;总体的思路就是去采集和统计，上游Operator在从buffer中getEvent的costtime。&lt;/p&gt;

&lt;p&gt;由于方法调用的耗时都很小，所以需要记录nanotime精度的耗时。&lt;/p&gt;

&lt;p&gt;在定制flink时，是依托于其一个wait的逻辑，只有在真正发生背压的时候才进行记录。&lt;/p&gt;

&lt;p&gt;但在fregata的自旋时间统计上有一个致命的缺陷，因为ringbuffer包装的原因，&lt;/p&gt;

&lt;p&gt;最终只是简单的统计了getNextSeq的方法调用时间。但是这里有一个缺陷，即使没有很明显的背压，&lt;/p&gt;

&lt;p&gt;只要调用足够频繁的话，也会累加出来一个较大的值，这会让报警的阈值非常难确定。&lt;/p&gt;

&lt;p&gt;在做2.0时我们尝试实现taskTopology的全自动伸缩，主要依赖的指标就是背压导致的自旋时间了。&lt;/p&gt;

&lt;p&gt;所以我一直在探索一个新的替代方案。&lt;/p&gt;

&lt;p&gt;最近有了一些突破，从原来关注Producer的计算密度，转向对consumer。原来ringbuffer选择的&lt;/p&gt;

&lt;p&gt;waitstrategy，由blockingtimeout改成了Lite。性能有很大的提升，减少了进入锁代码的的次数。&lt;/p&gt;

&lt;p&gt;在Lite策略的技术上，我增加了一个waittime的回调监听。每次wait之后出发notify。&lt;/p&gt;

&lt;p&gt;对这个waittime的累加，我们可以理解为下游消费者的繁忙程度，&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;离职&lt;/h2&gt;

&lt;p&gt;到这个月入职JD就满两年了，还是选择了在年前离开，这应该是我最后一次选择电商类的公司了。&lt;/p&gt;

&lt;p&gt;来年再战，感谢各位看官。&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Dec 2019 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2019-12-01-summary</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2019-12-01-summary</guid>
        
        
      </item>
    
      <item>
        <title>数据类型转换</title>
        <description>&lt;p&gt;数据处理中，经常要做异构数据的数据转化，能看到很多开源项目都有类似的模块，&lt;/p&gt;

&lt;p&gt;比如datax、canal、maxwell等。除了数据的ETL和计算外，还要处理字段类型。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;复杂度&lt;/h2&gt;

&lt;p&gt;mysql的某个字段是bigint，写到hive时类型是string，这是一个非常简单的例子。&lt;/p&gt;

&lt;p&gt;再说一个稍微复杂点的，mysql的某个字段是datetime，写入avro时是long。&lt;/p&gt;

&lt;p&gt;我能想到最复杂的场景是mysql的某个字段是datetime，以binlog方式采集出来&lt;/p&gt;

&lt;p&gt;写到kafka时转换为string(yyyy-MM-dd HH:mm:ss)，再写到parquetfile时类型为long。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;表达类型和数据类型&lt;/h2&gt;

&lt;p&gt;在Java里我们能看到的常见数据表达类型是很有限的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boolean、int、long、float、double、string、byte[]、date、short、char
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;大多数情况下数据表达类型和数据类型是一致的，这里举个反例，Date类型(yyyy-MM-dd)和&lt;/p&gt;

&lt;p&gt;DateTime类型(yyyy-MM-dd HH:mm:ss)的数据表达类型在java中都是util.Date。&lt;/p&gt;

&lt;p&gt;无论是在存储中还是语言中，类型都可以分成数据本质类型和数据表达类型。表达类型是可以复用的。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;目标&lt;/h2&gt;

&lt;p&gt;前面我们把类型转化的问题进行了分析，如果我们是根据具体需求进行硬编码，那自然是很简单的。&lt;/p&gt;

&lt;p&gt;我们希望设计一个结构，让增加一种数据类型或者增加一种数据表达更为简单。回归到具体业务中就是，&lt;/p&gt;

&lt;p&gt;我们可以很容易的添加一种新的数据源类型，经过一些简答的配置就可以完成全类型的匹配转换。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;解决方法&lt;/h2&gt;

&lt;h3 id=&quot;section-4&quot;&gt;结构层次&lt;/h3&gt;

&lt;p&gt;分为三层结构：数据本质类型、数据来源类型、数据输出类型&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;数据来源类型&lt;/h4&gt;

&lt;p&gt;可以为任意常见表达类型&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
public interface UFrom {
    void from(final Boolean p);
    void from(final Integer p);
    void from(final Long p);
    void from(final Float p);
    void from(final Double p);
    void from(final String p);
    void from(final Date p);
    void from(final byte[] p);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-6&quot;&gt;数据输出类型&lt;/h4&gt;

&lt;p&gt;也可以为任意常见表达类型&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
public interface UTo {
    Boolean toBoolean();
    Integer toInt();
    Long toLong();
    Float toFloat();
    Double toDouble();
    String toStr();
    Date toDate();
    byte[] toBytes();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-7&quot;&gt;数据本质类型&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;1、UAbstDate(UDate、UDateTime、UTime、UYear)&lt;/p&gt;

  &lt;p&gt;2、UBoolean&lt;/p&gt;

  &lt;p&gt;3、UInteger&lt;/p&gt;

  &lt;p&gt;4、ULong&lt;/p&gt;

  &lt;p&gt;5、UFloat&lt;/p&gt;

  &lt;p&gt;6、UDouble&lt;/p&gt;

  &lt;p&gt;7、UString&lt;/p&gt;

  &lt;p&gt;8、UBytes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;部分UData代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
private UAbstFrom&amp;lt;U&amp;gt; from;

private UAbstTo&amp;lt;U&amp;gt; to;

private boolean lazy;

private LazyCall[] lazyCalls = new LazyCall[MethodType.values().length];

private int lazyCallIndex = -1;

@Override
    public void from(Date p) {

        if (this.lazy) {
            this.lazyCallIndex = MethodType.DATE.ordinal();
            if (this.lazyCalls[this.lazyCallIndex] == null) {
                this.lazyCalls[this.lazyCallIndex] = new LazyCall&amp;lt;Date&amp;gt;(p, MethodType.DATE) {


                    @Override void exec() {

                        if (raw == null) {
                            from.setData(null);
                            return;
                        }
                        from.from(raw);
                    }
                };
            } else {
                this.lazyCalls[this.lazyCallIndex].raw = p;
            }
            return;
        } else {
            if (p == null) {
                this.from.setData(null);
                return;
            }
            this.from.from(p);
        }
    }

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当from和to的类型是一致的时候，在lazy模式下就不进行类型转换了，可以提高效率。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;最后&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
UDateTime u = new UDateTime(true);
u.from(&quot;2019-11-11 00:05:01&quot;);
u.toLong();

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 11 Nov 2019 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2019-11-11-datatype</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2019-11-11-datatype</guid>
        
        
        <category>datatype</category>
        
      </item>
    
      <item>
        <title>FlinkJob双十一前备战注意事项</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;1、确定双十一期间的数据特征&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	1.1、一般为数据条数倍增
	1.2、也有一些业务是单条数据体积增大
		1.2.1、考虑在消息中间件的messagesize的限制
		1.2.2、对序列化、反序列化的性能影响
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2、准备压测数据&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	2.1、根据业务逻辑随机生成数据
	2.2、通过kafka等消息中间件将多天的数据一次性消费完
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;3、数据源检查&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	3.1、kafka的流控阈值是否合理
	3.2、kafka的pt数是否够用
		3.2.1、临时扩容kafka的pt只对新数据有帮助，历史数据积压无法快速消除
		3.2.2、确定数据在源头没有严重的数据倾斜问题，防止大量数据集中于某一个特定的pt上
		3.2.3、kafkasource的parallelism应为pt数的1/2或1/4，预留临时扩大parallelism的空间
	3.3、增加高效的数据质量校验，检查job逻辑，适当的增加try-catch，注意catch发生时对性能的影响
	3.4、配置好监控
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;4、时间窗口逻辑&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	4.1、如果job存在时间窗口逻辑，要考虑模拟数据的正确性，简单的通过2.2进行性能测试大多无效
	4.2、不单单指flink的window操作，一些job逻辑中也可能包含时间窗口概念（比如：积攒10s的数据再批量输出，统计单位时间的uv等）
	4.3、乱序数据的问题也可能更为严重，合理指定latency或者watermarket逻辑
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;jobio&quot;&gt;5、检查job的外部io依赖&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	5.1、一般job都依赖redis、hbase等存储，在数据处理过程中对数据进行加工
		5.1.1、外部依赖的资源是否够用（存储、性能等）
		5.1.2、配置监控，有容灾方案
	5.2、适当使用asyncIO来提升性能
		5.2.1、不建议将有外部IO依赖的Operator的parallelism设置的非常大，一般都可以通过asyncIO来解决，更利于chaining-strate	gy的优化
		5.2.2、不要一味的提升asyncIO的thread数，适当做batch效果更佳，可参照sdk中的async-batch模型
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;sink&quot;&gt;6、关于Sink输出&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	6.1、kafkasink的parallelism不要与pt数绑死，防止pt扩容无效，也不要过大的parallelism
	6.2、如果序列化逻辑过于耗时，建议单独写在一个Operator里
	6.3、尽量不要单条数据sink输出，会对外部造成很大的压力
	6.4、batchsink时注意flush与checkpoint之间的关系
	6.5、batchsink时谨慎处理batchsize和lingertime
	6.6、在sink中实现重试逻辑，尽量不要将exception交给flink，效率太低，代价太大
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;checkpoint&quot;&gt;7、Checkpoint设置&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	7.1、合理设置checkpoint的频率，不要过于频繁
	7.2、慎重使用exactly-once，能不用尽量不用
	7.3、检查任务对于State的依赖程度，配合Savepoint启停任务
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;8、日志&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	8.1、净化日志打印内容
	8.2、避免system.out.println或者e.printstacktrace()等
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;9、内存使用情况&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	9.1、关注ygc、fgc的频率和耗时
	9.2、堆外空间的使用情况
	9.3、networkbuffer的分配比例
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-6&quot;&gt;10、背压&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	10.1、在性能测试时可以使用原生背压探测方式分析背压情况
	10.2、我们定制的背压监控是更为准确的量化指标，无需开启就可实现全天候的监控，不但可以定位，还能分析趋势
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;jobgraph&quot;&gt;11、jobgraph&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	11.1、核心Operator设置uid或uidhash
	11.2、使用预览拓扑功能提交job
	11.3、谨慎控制chaining-strategy，尤其是cpu开销高的Operator尽量分散
	11.4、尽量离散同类slot，控制slot在taskmanager的分配策略
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 08 Oct 2019 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2019-10-08-flink8-operation</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2019-10-08-flink8-operation</guid>
        
        
        <category>flink</category>
        
      </item>
    
      <item>
        <title>Avro优化</title>
        <description>&lt;p&gt;上一篇blog写了一个通用的avro数据schema，接下来写点于此相关的插曲。&lt;/p&gt;

&lt;h2 id=&quot;array&quot;&gt;Array&lt;/h2&gt;

&lt;p&gt;在上文中提到的的Data存在7个数据类型的Array，avro中定义的Array就是List。&lt;/p&gt;

&lt;p&gt;因为我们的meta是确定的，所以存储数据的数组length就是固定的，并不需要resize。&lt;/p&gt;

&lt;p&gt;假如在写入数据时，并不按照schema的顺序来写的话，就会导致操作Arraylist报错。&lt;/p&gt;

&lt;p&gt;所以需要实现一个List来包装数组的特性，我们就叫它FixedList吧。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    private Object[] elementData;

    public FixedList(int capacity) {
        this.elementData = new Object[capacity];
    }

    @Override
    public int size() {
        return elementData.length;
    }

    @Override
    public boolean isEmpty() {
        return false;
    }

   @Override
    public E get(int index) {
        return elementData(index);
    }

    @Override
    public E set(int index, E element) {
        E e = elementData(index);
        elementData[index] = element;
        return e;
    }

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;scheme-to-java&quot;&gt;scheme to java&lt;/h2&gt;

&lt;p&gt;定义schema的json后，通过avro-tool来compile得到java文件。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -jar avro-tools-1.9.1.jar compile -string schema Data.schema .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第一次使用avro的enum类型，发现还单独生成了一个enum的java文件，不要忽略了。&lt;/p&gt;

&lt;p&gt;avro中string默认为charsequence，可以加-string参数改为java.lang.String。&lt;/p&gt;

&lt;h2 id=&quot;encoder&quot;&gt;encoder&lt;/h2&gt;

&lt;p&gt;在序列化avro时，需要BinaryEncoder实例，默认为BufferBinaryEncoder。&lt;/p&gt;

&lt;p&gt;如果数据的字段比较多，数据体积比较大的话，需要适当提高Buffer的size，来提高性能，&lt;/p&gt;

&lt;p&gt;不然会导致多次arraycopy。avro还提供了一个BlockingBinaryEncoder，&lt;/p&gt;

&lt;p&gt;针对超大的Array和Map有优化，一般来说是用不到的。&lt;/p&gt;

&lt;p&gt;一般来说在encode时，还需要一个ByteArrayOutputStream，也需要适当考虑一下初始size。&lt;/p&gt;

&lt;p&gt;avro的decoder也一样，可以设置buffersize的。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;大致读了一下avro的源码，涉及到arraycopy的比较多，之后做性能测试的时候再看如何优化。&lt;/p&gt;

&lt;h2 id=&quot;dataavsc&quot;&gt;data.avsc&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;namespace&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;exchange&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;record&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;long&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;opt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Opt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;enum&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;symbols&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;INSERT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UPDATE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DELETE&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;long&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;map&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;values&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;metaId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;long&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;strings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;array&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bytes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;array&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bytes&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ints&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;array&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;int&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;longs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;array&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;long&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;floats&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;array&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;float&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;doubles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;array&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;double&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;booleans&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;array&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;boolean&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;updatesLong&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;long&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 19 Sep 2019 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2019-09-19-avro4</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2019-09-19-avro4</guid>
        
        
        <category>avro</category>
        
      </item>
    
      <item>
        <title>Avro优化</title>
        <description>&lt;p&gt;之前写过两篇blog，是关于项目使用avro过程中碰到的问题。&lt;/p&gt;

&lt;p&gt;最近看了一下最新版本的avro1.9.x，很多之前的问题都已经得到了优化。&lt;/p&gt;

&lt;p&gt;比如schema已经不需要考虑sync的性能问题了。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;现有问题&lt;/h2&gt;

&lt;p&gt;大数据项目中Avro基本上是事实标准了，但是管理schema是一个非常痛苦的事情。&lt;/p&gt;

&lt;p&gt;之前公司同事制定的kafka消息标准格式是一个avro类中包含一些常见固定字段和一个大的Map，&lt;/p&gt;

&lt;p&gt;schema格式的差异都体现在map的key当中，value也规定是String类型。&lt;/p&gt;

&lt;p&gt;这种方案基本上跟使用json没有区别，数据体积比较大，序列化反序列化的效率也不高。&lt;/p&gt;

&lt;p&gt;代码中也充斥了大量的tostring和valueof，非常影响性能，也容易报错。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;解决保留数据类型的问题&lt;/h2&gt;

&lt;p&gt;avro中的标准数据类型大概有7种，string、bytes、int、long、float、double、boolean。&lt;/p&gt;

&lt;p&gt;每种类型都可能出现，但是每种类型数据出现的次数是不确定的,这个问题可以通过array来解决。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    private java.util.List&amp;lt;java.lang.String&amp;gt; strings;
    private java.util.List&amp;lt;java.nio.ByteBuffer&amp;gt; bytes;
    private java.util.List&amp;lt;java.lang.Integer&amp;gt; ints;
    private java.util.List&amp;lt;java.lang.Long&amp;gt; longs;
    private java.util.List&amp;lt;java.lang.Float&amp;gt; floats;
    private java.util.List&amp;lt;java.lang.Double&amp;gt; doubles;
    private java.util.List&amp;lt;java.lang.Boolean&amp;gt; booleans;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;元数据管理&lt;/h2&gt;

&lt;p&gt;因为数据写入了Array，所以字段名称就需要和index进行绑定，需要做简单的Meta管理功能。&lt;/p&gt;

&lt;p&gt;其中每个column都有下面这样一个MetaEntity：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    private String columnName;
    private Schema.Type type;
    private int indexOfall;
    private int indexOftype;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;固定字段&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    private long nid;
    private java.lang.String sid;
    private exchange.Opt opt;
    private long timestamp;
    private java.util.Map&amp;lt;java.lang.String,java.lang.String&amp;gt; tags;
    private long metaId;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;nid和sid是用来标识当前这条数据的唯一Id&lt;/li&gt;
    &lt;li&gt;opt是指这条数据的操作类型：insert、update或delete&lt;/li&gt;
    &lt;li&gt;timestamp用来存放一个时间戳，一般值数据生成时间&lt;/li&gt;
    &lt;li&gt;tags用来存放一些tag，比如数据的业务分类等&lt;/li&gt;
    &lt;li&gt;metaId用来关联Meta&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;之前我写过一篇blog介绍过如何局部解析avro，为了方便实现filter功能，将tags放在&lt;/p&gt;

&lt;p&gt;相对靠前的位置，方便快速的局部解析，进行数据过滤或者路由。&lt;/p&gt;

&lt;h2 id=&quot;update&quot;&gt;update类型数据&lt;/h2&gt;

&lt;p&gt;如果是update类型的操作，就存在更新前的数据和更新后的数据，参考binlog中的event设计，&lt;/p&gt;

&lt;p&gt;我们也用一个bitset来记录哪些字段被更新了，在avro中用long来表示。&lt;/p&gt;

&lt;p&gt;为了存放前后两个数据，我们将各种类型的数组进行了扩容（×2），通过数组下标来控制读写。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;包装&lt;/h2&gt;

&lt;p&gt;最后我们将针对data的操作包装在一个datacontainer里，屏蔽复杂度。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class DataContainer {
    private Meta meta;
    private Data data;
    private BitSet updatesBitSet;
    private int positionRatio = 1; //如果是update的话 ratio为2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;数据写入的实现&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        int pos = metaEntity.getIndexOftype() * this.positionRatio;
        switch (metaEntity.getType()) {
            case STRING:
                this.data.getStrings().set(pos, (String) val);
                if (change) {
                    this.data.getStrings().set(pos + 1, (String) oldVal);
                    this.updatesBitSet.set(metaEntity.getIndexOfall());
                }
                break;
            case BYTES:
                this.data.getBytes().set(pos, (ByteBuffer) val);
                if (change) {
                    this.data.getBytes().set(pos + 1, (ByteBuffer) oldVal);
                    this.updatesBitSet.set(metaEntity.getIndexOfall());
                }
                break;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-5&quot;&gt;结论&lt;/h2&gt;

&lt;p&gt;通过简单的测试，序列化后的数据体积减少了接近一半，序列化也加速了50%左右。&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Aug 2019 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2019-08-13-avro3</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2019-08-13-avro3</guid>
        
        
        <category>avro</category>
        
      </item>
    
      <item>
        <title>人生第一次手术-ACL</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;绞索&lt;/h2&gt;

&lt;p&gt;当右腿轻轻发力向左侧跳起时，汗水在眼角滑落。没有任何的预兆，右膝关节在腾空的瞬间发生了绞索，嘭的一声。我没有跌倒，左脚缓冲几下后跪在地上，右膝活动受限，尝试几次都没能将绞索打开，我预感情况不会很好。回家冰敷后，几次尝试打开绞索，但没有作用，这次可能真的遇到麻烦了。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;核磁&lt;/h2&gt;

&lt;p&gt;几经辗转，在傍晚时来到德尔康尼专科医院，这里可以在今晚就拍核磁片子，确诊伤的到底有多重。结果当然是令人沮丧的，我的十字韧带前叉断裂、半月板撕裂，医生的建议是手术治疗。喜欢看体育的人应该都听过这个伤——十字韧带断裂+半月板撕裂，会联想起好多名字，皮耶罗、罗纳尔多、欧文、巴乔、卡卡……与这个伤同时出现的一句解说词就是赛季报销了。回家的路很远，我大概知道接下来几个月将面临什么样的困难，也许困难比想的还要多。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;求医&lt;/h2&gt;

&lt;p&gt;在家楼下和哥们家明抽了手术前的最后一颗烟，从明天开始放下一切，全力治伤。来北京的第六个夏天，我习惯了医院的味道。先后在人民医院、北医三院问诊后，明确我的伤一定要做手术了。单纯的十字韧带前叉断裂也不一定需要手术治疗，消肿后断裂的韧带会形成瘢痕，还能起到一点作用，患者加强腿部肌肉力量的训练，可以稳定住关节。但我的半月板伤势也很重，必须要手术治疗。两处伤复合在一起，也意味着我的康复周期会变的漫长。求医问诊的过程中，我渐渐对膝关节有了些了解，对于我未来的康复有了认知，至少三个月，也可能是半年。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;鼓励&lt;/h2&gt;

&lt;p&gt;一周的时间里，无数次放大那些“可能性”，每天过的都很昏暗。把电话打给了雪松，我已经不记得聊了什么，十几年的朋友，他一定知道我的感受。跟他比起来，我所经历的都不算什么。在回复彪哥的微信里我说，我的右膝有陈旧伤，如果不是今年断掉，未来十年也极有可能发生，趁年轻恢复的还快一点。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;手术&lt;/h2&gt;

&lt;p&gt;最佳的手术时间一般是受伤后的两三周，需要等关节基本消肿，这次期间尽量恢复腿部的活动能力，加强肌肉力量。这是我第一次做手术，内心无比恐惧。手术是腰部以下麻醉，躺在手术台上有点冷，渐渐的失去了下肢的感觉。十字韧带前叉做了自体取材的重建手术，半月板进行打磨后缝合了五针，什么锤子、螺丝、电钻都用上了。手术很顺利，半月板比预期还要严重，好在大部分都保留了下来。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;康复&lt;/h2&gt;

&lt;p&gt;手术后的第四天，我拄拐走出医院的时候，恍如隔世。手术只是开始，康复更为重要。接下来我要面临漫长的恢复期，需要不断与疼痛做斗争。为了恢复的快一点，我在一家私立的康复医院继续接受治疗。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;感谢&lt;/h2&gt;

&lt;p&gt;这个夏天要感谢的人很多。&lt;/p&gt;

&lt;p&gt;我的妻子，在这个夏天经历了太多的心酸，这是我们结婚后的第一个纪念日，只能在医院度过。&lt;/p&gt;

&lt;p&gt;我的父母，开始留意每一样对膝关节有帮助的食物，开始每天等我的视频通话。&lt;/p&gt;

&lt;p&gt;我的朋友们，是你们的鼓励陪我度过了这个艰难的夏天，认识你们是我的福气。&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Jul 2019 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2019-07-20-acl-operation</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2019-07-20-acl-operation</guid>
        
        
        <category>手术</category>
        
      </item>
    
      <item>
        <title>初识flink7</title>
        <description>&lt;p&gt;flink基于1.5的定制化开发工作就告一段落了，业务团队对flink的诉求已经超越1.5了，&lt;/p&gt;

&lt;p&gt;主要集中在table、sql、state上，还有2phase的filesink等。&lt;/p&gt;

&lt;h2 id=&quot;or-18&quot;&gt;1.7 or 1.8&lt;/h2&gt;

&lt;p&gt;一个大的社区版本一般要维护1年左右。1.5的社区版我们从18年6月维护到现在，&lt;/p&gt;

&lt;p&gt;但从去年年底开始社区就对1.5停更了，我们只能自己从其他的版本中merge一些需要的bugfix。&lt;/p&gt;

&lt;p&gt;我们决定下一个大版本是1.8，主要基于一下几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;社区1.9的巨大投入会严重影响其他分支的更新速度，1.7已经进入暮年。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1.8的一些小特性我们看来还是非常实用的，值得蹚雷。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;刚刚准备release-1.8.1，未来还能从社区得到3-4个小版本。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1.9的更新过于巨大，真正稳定下来需要比较长的时间，1.8在未来一年多应该是首选。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;合并&lt;/h2&gt;

&lt;p&gt;1.8.1的一些issue被社区移到1.8.2去完成，所以很快就进入了RC阶段。&lt;/p&gt;

&lt;p&gt;我们在1.8分支上，进行了merge工作，主要是把我们在1.5上的定制工作迁移到1.8。&lt;/p&gt;

&lt;p&gt;合并的工作开展速度还是挺快的，预计2周左右就可以完成，顺手可以做一些小的重构。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;未来&lt;/h2&gt;

&lt;p&gt;在1.8的基础工作完成后，我们就要投入到Sql方向了。&lt;/p&gt;

&lt;p&gt;Sql的方向需要一些铺垫，比如State的管理功能增强，数据Table化等。&lt;/p&gt;

&lt;h3 id=&quot;state&quot;&gt;State增强&lt;/h3&gt;

&lt;p&gt;flink的state是核心组件，无论是故障恢复还是恰好一次，都至关重要。&lt;/p&gt;

&lt;p&gt;但是State的管理功能并不完善，比如如何让savepoint周期性的触发，&lt;/p&gt;

&lt;p&gt;如何合理利用checkpoint来恢复等。&lt;/p&gt;

&lt;h3 id=&quot;table&quot;&gt;数据Table化&lt;/h3&gt;

&lt;p&gt;Flink的数据来源其实是比较集中的，大部分来自Kafka或者MQ。&lt;/p&gt;

&lt;p&gt;再经过一些反序列化工作，应该可以映射为Pojo或者说Table。&lt;/p&gt;

&lt;p&gt;这部分工作在其他公司里也是差不多的，做一些定制化的开发，并不难。&lt;/p&gt;

&lt;p&gt;但是一些数据质量高的公司做这一步就非常快，比如格式比较统一等。&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Jun 2019 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2019-06-13-flink7</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2019-06-13-flink7</guid>
        
        
        <category>flink</category>
        
      </item>
    
      <item>
        <title>初识flink6</title>
        <description>&lt;p&gt;基于社区版1.5的定制化开发工作已经接近尾声了，最后一个大的Feature是背压指标的量化。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;背压&lt;/h2&gt;

&lt;p&gt;流计算框架上都提供了背压相关的机制，但监控量化的形式各有不同。&lt;/p&gt;

&lt;p&gt;Flink-UI上提供了一个背压探测的功能，基本原理就是Profiling。&lt;/p&gt;

&lt;p&gt;在实际应用中，我们发现了很多问题，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;只能观测当前，无法回溯历史；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一次只能观测一个taskchain，没有全局概念；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;量化概念模糊，不利于告警预警；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;开销高，无法长期运行；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;综上，我们决定开发自己的背压监控功能，并为用户提供预警告警的功能。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;量化&lt;/h2&gt;

&lt;p&gt;我们定义背压的指标和之前fregata做伸缩容的指标是一个含义，内部称之为自旋时间，&lt;/p&gt;

&lt;p&gt;简单来说就是数据处理线程等待eventbuffer的时间。&lt;/p&gt;

&lt;p&gt;在flink中，主要修改如下几个类：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
RecordWriter.requestNewBufferBuilder

LocalBufferPool.requestBufferBuilderBlocking

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在LocalBufferPool的requestBuffer时，会进入一段while循环&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
while (availableMemorySegments.isEmpty()) 

    ...
    availableMemorySegments.wait(2000);
    ...

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这块代码主要是我们修改的区域。&lt;/p&gt;

&lt;p&gt;总的来说，我们统计了wait的时间和进入while循环的次数，作为背压的指标。&lt;/p&gt;

&lt;p&gt;进入while循环次数多，我们认为stream是时断时续的，效率不高，类似堵车，&lt;/p&gt;

&lt;p&gt;这类问题大多需要调节networkbuffer大小，并行度等可以有效解决。&lt;/p&gt;

&lt;p&gt;wait的累加时间长（比如1min里有58s在wait），任务下游严重阻塞，&lt;/p&gt;

&lt;p&gt;这类问题最大的可能是下游IO超时阻塞。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;维度&lt;/h2&gt;

&lt;p&gt;我们的监控数据最后是进入Promethues的，有了指标和值，还需要一些维度信息。&lt;/p&gt;

&lt;p&gt;Flink的Metric主要是task级和Operator级，所以我们只要参照flink的&lt;/p&gt;

&lt;p&gt;metric定义方式，就获得了subtask的一系列标签(taskId,index,attemptId等)。&lt;/p&gt;

&lt;p&gt;在此基础上，我们又将数据的target也作为了一个维度，就是RecordWriter中的&lt;/p&gt;

&lt;p&gt;targetChannelId。如果一个task的下游有多个target，我们可以区分出到底是&lt;/p&gt;

&lt;p&gt;哪一个导致背压的。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;开销&lt;/h2&gt;

&lt;p&gt;我们增加的这些统计指标，在程序没法发生背压时是没有任何开销的，一旦发生背压，&lt;/p&gt;

&lt;p&gt;就意味着程序的吞吐极具下降，那么相关逻辑的执行次数也非常少，costtime的计算&lt;/p&gt;

&lt;p&gt;和累加计数器的操作开销也非常低，几乎可以忽略不计。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;效果&lt;/h2&gt;

&lt;p&gt;监控数据打通后，我们在Promethues上进行了一下统计，发现了20多个任务存在背压，&lt;/p&gt;

&lt;p&gt;我们也对比了Flink-WebUI上的探测结果，结论都是准确的，证明方案是可行有效的。&lt;/p&gt;
</description>
        <pubDate>Sat, 18 May 2019 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2019-05-18-flink6</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2019-05-18-flink6</guid>
        
        
        <category>flink</category>
        
      </item>
    
      <item>
        <title>avro优化</title>
        <description>&lt;p&gt;最近在进行fregata2.0重构时，再次优化avro的反序列化过程。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;背景&lt;/h3&gt;

&lt;p&gt;fregata-quasi任务是典型的cpu和内存都高度消耗的场景，主要是数据的&lt;/p&gt;

&lt;p&gt;序列化和反序列化。通过JFR多次观测，其中一个热点是avro中的字符串类型&lt;/p&gt;

&lt;p&gt;数据的处理（实际数据中字符串类型出现的比较多，201712的blog也提到过）。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;问题源码&lt;/h3&gt;

&lt;p&gt;对相关代码进行分析后，把目光落在这个区域。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (length &amp;lt; 0)
    throw new AvroRuntimeException(&quot;Malformed data. Length is negative: &quot;+ length);
int remaining = limit - pos;
if (length &amp;lt;= remaining) {
    System.arraycopy(buf, pos, bytes, start, length);
    pos += length;
} else {
    // read the rest of the buffer
    System.arraycopy(buf, pos, bytes, start, remaining);
    start += remaining;
    length -= remaining;
    pos = limit;
    // finish from the byte source
    source.readRaw(bytes, start, length);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在字符串处理中，Avro引入了一个UTF8对象（本质就是一个byte数组），&lt;/p&gt;

&lt;p&gt;在经过这段代码后，再将UTF8对象转为String，经过string的decode。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;优化&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int start = 0;
int length = readInt();
if (length &amp;lt; 0) {
    throw new AvroRuntimeException(&quot;Malformed data length : &quot; + length);
}
int remaining = limit - pos;
if (length &amp;lt;= remaining) {
    result = new String(buf, pos, length);
    pos += length;
} else {
    //read the rest of the buffer
    result = new String(buf, pos, remaining);
    start += remaining;
    length -= remaining;
    pos = limit;
    //finish from the byte source
    source.readRaw(null, start, length);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里主要是省掉了中间的UTF8对象，减少了一次System.arraycopy&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;结论&lt;/h3&gt;

&lt;p&gt;经过测试，这个优化可以提升10%左右的反序列化速度。&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Apr 2019 10:00:00 +0800</pubDate>
        <link>http://peiliping.github.io/blog/archivers/2019-04-26-avro2</link>
        <guid isPermaLink="true">http://peiliping.github.io/blog/archivers/2019-04-26-avro2</guid>
        
        
        <category>avro</category>
        
      </item>
    
  </channel>
</rss>
