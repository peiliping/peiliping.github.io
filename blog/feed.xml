<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://peiliping.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://peiliping.github.io/blog/" rel="alternate" type="text/html" /><updated>2023-05-19T13:06:19+08:00</updated><id>http://peiliping.github.io/blog/feed.xml</id><title type="html">Pei LiPing’s Blog</title><subtitle>有一天你走出腐烂的象牙塔门， 成为那漂浮不定的孤寂灵魂。 四处搜寻着安身的墓地坑坟， 刻画和擦拭着自己的墓志铭文。</subtitle><entry><title type="html">Depth Grid</title><link href="http://peiliping.github.io/blog/2022/11/03/grid3.html" rel="alternate" type="text/html" title="Depth Grid" /><published>2022-11-03T10:00:00+08:00</published><updated>2022-11-03T10:00:00+08:00</updated><id>http://peiliping.github.io/blog/2022/11/03/grid3</id><content type="html" xml:base="http://peiliping.github.io/blog/2022/11/03/grid3.html"><![CDATA[<p>之前讲过关于深度网格策略的思路，今天对这个进行一下优化。</p>

<h2 id="挂单与深度的关系">挂单与深度的关系</h2>

<p>挂单的量要与深度成正比，核心思想是越稳定的深度，就可以挂更多的单。</p>

<p>但是如果深度有3kw就挂3单，都在深度队列的末尾，之后末尾深度补充的很差，就很可能是无效成交。</p>

<p>如果深度相对薄一些，震荡幅度稍微大一些，就会很容易导致损失，或者是大量的无效成交。</p>

<p>这里的优化方向是两笔挂单之间的深度间隔是1kw，虽然会导致一些排队时间的损失，但是抵御波动的能力强了很多。</p>

<h2 id="如何估算深度的消耗情况">如何估算深度的消耗情况</h2>

<p>精确的计算方法当然是订阅实时的交易明细，将每一笔的成交价格和成交量进行分类统计，</p>

<p>根据买卖的方向就可以计算出一段时间内深度确切的消耗情况。但是这个计算的成本相对较高，稳定性较差。</p>

<p>另外一个思路就是通过K线估算深度的消耗情况，这个评估方法我们之前在estimate-depth的blog中介绍过，</p>

<p>这里就不多说了。需要特别理解一下taker-buy-base-asset-volume这个单词的含义，这里有一个公式：</p>

<p>taker-buy-base-asset-volume + taker-buy-quote-asset-volume = volume</p>

<h2 id="如何估算深度积累情况">如何估算深度积累情况</h2>

<p>既然是要让两笔挂单之间的深度达到1kw，那么如何估算呢？假设第一笔挂单的深度是2kw，过了15分钟，</p>

<p>当前深度是2.4kw，判断当前积累的深度是否达到1kw，公式如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
第一笔订单之前预计剩余的深度 = 2kw - sum（15分钟内的taker-buy-XXX-asset-volume）

第一笔订单之后预计积累的深度 = 2.4kw - 第一笔订单之前预计剩余的深度

</code></pre></div></div>

<h2 id="其他影响估算的因素">其他影响估算的因素</h2>

<h3 id="撤单">撤单</h3>

<p>在实测中我们统计过撤单的比例非常低，不到1%，几乎没有什么影响，所以可以忽略不计。</p>

<h3 id="1min的k线包含多个盘口价格">1min的K线包含多个盘口价格</h3>

<p>也就是这1min的波动较大，taker并不是集中在一个价格上成交的。在稳定B的交易中，这个比例也是偏低的，而且</p>

<p>taker方向也主要集中在击穿方向上，对于你要估算的方向贡献会非常小，可以当成0来处理。</p>

<p>上面的这两种情况都会导致多等待一些时间才挂单，但是影响是非常小的。</p>]]></content><author><name></name></author><summary type="html"><![CDATA[之前讲过关于深度网格策略的思路，今天对这个进行一下优化。]]></summary></entry><entry><title type="html">Birthday</title><link href="http://peiliping.github.io/blog/2022/10/03/birthday.html" rel="alternate" type="text/html" title="Birthday" /><published>2022-10-03T10:00:00+08:00</published><updated>2022-10-03T10:00:00+08:00</updated><id>http://peiliping.github.io/blog/2022/10/03/birthday</id><content type="html" xml:base="http://peiliping.github.io/blog/2022/10/03/birthday.html"><![CDATA[<p>时间真快，一转眼宝宝已经周岁了。</p>

<p>这一年真的非常不容易，祝宝宝卓壮成长。</p>]]></content><author><name></name></author><summary type="html"><![CDATA[时间真快，一转眼宝宝已经周岁了。]]></summary></entry><entry><title type="html">Awk Json Parser</title><link href="http://peiliping.github.io/blog/2022/09/02/jsonparser.html" rel="alternate" type="text/html" title="Awk Json Parser" /><published>2022-09-02T10:00:00+08:00</published><updated>2022-09-02T10:00:00+08:00</updated><id>http://peiliping.github.io/blog/2022/09/02/jsonparser</id><content type="html" xml:base="http://peiliping.github.io/blog/2022/09/02/jsonparser.html"><![CDATA[<p>Awk主要是用于文本数据处理的，而且主要是CSV格式。如果你碰到要处理Json数据，</p>

<p>就会比较麻烦。Awk原生没有提供Json的解析方法，可以加一个rapidjson的exlib。</p>

<p>rapidjson我在logwatch的项目中使用过，性能极佳。也许有人会想为什么不用jq呢，</p>

<p>如果awk的运算逻辑比较复杂的话，用jq解析是不现实的，还是需要操作一个awk的原生</p>

<p>数组，才能完全发挥awk的能力。</p>

<p>Github上有一个基于awk实现的<a href="https://github.com/step-/JSON.awk">JsonParser</a>。</p>

<p>本着造轮子要造多个的基本原则，我也来凑个热闹，做个精简版的。</p>

<h3 id="元素">元素</h3>

<ol>
  <li>
    <p>String</p>
  </li>
  <li>
    <p>Number</p>
  </li>
  <li>
    <p>Boolean</p>
  </li>
  <li>
    <p>Array</p>
  </li>
  <li>
    <p>Object(key-values)</p>
  </li>
</ol>

<h3 id="逻辑关系">逻辑关系</h3>

<p>按照Lpeg表达式的风格来写一下</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
Element = (String or Number or Boolean or Array or Object)

Array = [ Element , Element ...]

Key = String 

Object = { Key : Element , Key : Element ...}

JSON = (Array or Object)

</code></pre></div></div>

<h3 id="元素类型的判断依据">元素类型的判断依据</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  if(_sp == "\""){return "string";}
  if(_sp ~ /[0-9\-]/){return "number";}
  if(_sp == "t" || _sp == "f"){return "boolean";}
  if(_sp == "["){return "array";}
  if(_sp == "{"){return "object";}

</code></pre></div></div>

<h3 id="完整代码">完整代码</h3>

<p>一个80行的JsonParser，简单明了。</p>

<p>说一个Awk的大坑，awk的变量是不能声明为local的，所以使用变量要非常慎重。</p>

<p>一旦需要local var，就要在函数params里声明一个虚参。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function fatal(_sp){ print "fatal error !!! index : ("IDX") "_sp; exit 1; }
function get(_np){ return substr(JSON_STRING, IDX, _np); }
function step(_np){ IDX+=_np; }
function skip(_sp, _greed){
  if(get(length(_sp)) == _sp){ 
    step(length(_sp)); 
    if(_greed == "true"){ skip(_sp, _greed); }
  } 
}
function skipSpace(){ skip(" ", "true" ); }
function skipDot(){ skip(",", "false"); }
function check(_sp){ 
  if(get(length(_sp)) == _sp){ step(length(_sp)); return ; }
  fatal("check failed "_np);  
}
function keyfc(_key, _i){
  for(_i = IDX; ; _i++){ if(substr(JSON_STRING, _i, 1) == "\""){ break; } }
  _key = get(_i - IDX); step(_i - IDX + 1); return _key;
}
function strfc(_json, _key, _i){
  for(_i = IDX; ; _i++){ if(substr(JSON_STRING, _i, 1) == "\"" &amp;&amp; substr(JSON_STRING, _i - 1, 1) != "\\"){ break; } }
  _json[_key] = get(_i - IDX); step(_i - IDX + 1);
}
function numfc(_json, _key, _i){
  for(_i = IDX; ; _i++){ if(substr(JSON_STRING, _i, 1) !~ /[0-9.\-]/){ break; } }
  _json[_key] = get(_i - IDX); step(_i - IDX);
}
function boolfc(_json, _key){
  if(get(4) == "true" ){ _json[_key] = "true";  step(4); return; }
  if(get(5) == "false"){ _json[_key] = "false"; step(5); return; }
  fatal("not boolean");
}
function arrfc(_json, _key){
  _key = 0;
  while(1 == 1){
    skipSpace();
    if(get(1) == "]"){ step(1); skipSpace(); break; }
    if(get(1) == ","){ _json[_key++] = ""; skipDot(); continue; }
    dispatch(_json, _key++); skipSpace();
    if(get(1) != "]"){ check(","); }
  }
}
function objfc(_json, _key){
  while(1 == 1){
    skipSpace();
    if(get(1) == "}"){ step(1); skipSpace(); break; }
    check("\""); _key = keyfc(); skipSpace(); check(":"); skipSpace();
    dispatch(_json, _key); skipSpace();
    if(get(1) != "}"){ check(","); }
  }
}
function jtype(_sp){
  if(_sp == "\""){return "string";}
  if(_sp ~ /[0-9\-]/){return "number";}
  if(_sp == "t" || _sp == "f"){return "boolean";}
  if(_sp == "["){return "array";}
  if(_sp == "{"){return "object";}
  fatal("bad format");
}
function dispatch(_json, _key, _sp){
  _sp = jtype(get(1));
  if(_sp == "array"){
    if(_key == ""){
      _json["_type_"] = "array";  step(1); arrfc(_json);
    }else{
      _json[_key]["_type_"] = "array";  step(1); arrfc(_json[_key]);
    }
  }else if(_sp == "object"){
    if(_key == ""){
      _json["_type_"] = "object"; step(1); objfc(_json);
    }else{
      _json[_key]["_type_"] = "object"; step(1); objfc(_json[_key]);
    }
  }else if(_sp == "string"){
    step(1); strfc(_json, _key);
  }else if(_sp == "number"){
    numfc(_json, _key);
  }else if(_sp == "boolean"){
    boolfc(_json, _key);
  }
}
function parserJson(_str, _json){
 JSON_STRING = _str; IDX = 1; skipSpace();
 rootType = jtype(get(1)); if(rootType != "array" &amp;&amp; rootType != "object"){ fatal("not json"); }
 dispatch(_json);
}

</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[Awk主要是用于文本数据处理的，而且主要是CSV格式。如果你碰到要处理Json数据，]]></summary></entry><entry><title type="html">Dynamic Grid</title><link href="http://peiliping.github.io/blog/2022/08/19/grid2.html" rel="alternate" type="text/html" title="Dynamic Grid" /><published>2022-08-19T10:00:00+08:00</published><updated>2022-08-19T10:00:00+08:00</updated><id>http://peiliping.github.io/blog/2022/08/19/grid2</id><content type="html" xml:base="http://peiliping.github.io/blog/2022/08/19/grid2.html"><![CDATA[<p>再介绍一种有趣的网格交易玩法。</p>

<h3 id="动态区间">动态区间</h3>

<p>上期说了网格交易的资金利用率很低，主要原因就是需要覆盖很大的价格范围。</p>

<p>那么有没有什么办法可以把这个区间缩小一点呢，这样就可以提高利用率和收益率了。</p>

<p>回忆一下去年提到的Linear相关的知识，通过数学的方法对价格的波动区间进行评估。</p>

<p>轨道的上轨和下轨就是网格的最大价格和最小价格了，这个值也是动态的。</p>

<h3 id="原则">原则</h3>

<p>选取网格交易的方向（多、空）并不是直接判断未来的涨跌，而是一个逆向的思路。</p>

<p>当前趋势不可能大跌，则开正向的网格，如果当前趋势是不可能大涨，那么就是开反向的。</p>

<p>任何单边的行情里使用网格程序进行交易管理，都是会错过大部分利润的，在漫长的</p>

<p>底部整齐期间或者是顶部震荡出货期间，使用更为恰当。</p>

<p>可以适当在上轨或者下轨附近，甚至超出轨道时开始网格交易，这样整体的成本足够低。</p>

<h3 id="工具">工具</h3>

<p>这种网格并不能像传统普通网格那样长期无人值守，其实更像一种辅助交易工具。</p>

<p>将受益曲线做的更加平滑，减少人工盯盘的时间。当然你也可以为这种网格设置一些条件。</p>

<p>比如多空比超过多少就终止long方向的买入，只卖出，甚至是直接清仓。</p>

<p>Linear是一种概率评估，虽然有效性很好，但是并不能作为方向决策的依据。</p>

<p>当你确定好交易的方向时，可以通过Linear寻找一个好的买入卖出价格。</p>

<p>在预测回调力度、震荡区间范围等方面都有很好的效果。</p>]]></content><author><name></name></author><summary type="html"><![CDATA[再介绍一种有趣的网格交易玩法。]]></summary></entry><entry><title type="html">Estimate Depth</title><link href="http://peiliping.github.io/blog/2022/07/10/estimatedepth.html" rel="alternate" type="text/html" title="Estimate Depth" /><published>2022-07-10T10:00:00+08:00</published><updated>2022-07-10T10:00:00+08:00</updated><id>http://peiliping.github.io/blog/2022/07/10/estimatedepth</id><content type="html" xml:base="http://peiliping.github.io/blog/2022/07/10/estimatedepth.html"><![CDATA[<p>上次讲了基于深度的网格交易，这里补充一个小技巧。</p>

<p>如何评估自己的挂单，在深度中的位置，预计还要多久才能成交。</p>

<h3 id="深度排队">深度排队</h3>

<p>上一篇中提到了，深度是比较厚的，所以交易排队的时间需要比较久。</p>

<p>那么如何预估我们订单还需要多久完成呢？一旦挂单进入深度之后，</p>

<p>我们是无法准确知道订单前面还有多少的。但可以大致估算一个悲观结果，</p>

<p>最多还有xxxx排在我们的订单之前。</p>

<p>排在我们订单前面的订单也可能撤销订单，所以得到的数据是悲观值。</p>

<h3 id="数据">数据</h3>

<p>在下单时，我们可以记下当时的深度值，比如3kw。我们的订单指令提交后，</p>

<p>就会排在末尾，前面大致有3kw的深度。过了2个小时，想估算前面还有多少。</p>

<p>将这两个小时的k线数据按照每一分钟查询出来，得到每一分钟的成交量和</p>

<p>主动买入成交量，主动卖出成交量，然后进行累加。假如我们的订单是买单，</p>

<p>那么主动卖出成交量的加和，就是成交消耗的买一深度的量。再用3kw减去</p>

<p>累加值，就知道我们的订单前面大致还有多少排队的。</p>

<h3 id="用处">用处</h3>

<p>通过计算我们的订单在深度排队中前后的情况，还有主动成交的历史数据轨迹，</p>

<p>可以帮我们优化挂单策略，当买一深度较薄时，是否需要将部分卖单挂到买二去。</p>

<p>甚至主动成交，来调剂手中两种稳定币的比例，在当前成交价移动后，快速排队。</p>]]></content><author><name></name></author><summary type="html"><![CDATA[上次讲了基于深度的网格交易，这里补充一个小技巧。]]></summary></entry><entry><title type="html">Depth Grid</title><link href="http://peiliping.github.io/blog/2022/06/11/grid.html" rel="alternate" type="text/html" title="Depth Grid" /><published>2022-06-11T10:00:00+08:00</published><updated>2022-06-11T10:00:00+08:00</updated><id>http://peiliping.github.io/blog/2022/06/11/grid</id><content type="html" xml:base="http://peiliping.github.io/blog/2022/06/11/grid.html"><![CDATA[<p>这次讲一个特殊类型的网格交易思路，基于深度的网格交易。</p>

<h2 id="深度">深度</h2>

<p>深度也有叫盘口的，就是通常股民说的买一卖一。</p>

<p>一般交易所的深度数据是(准)实时的，包含当前价格上下N档的价格与挂单的预估成交量。</p>

<p>我们通常说的流动性好，就是深度中的预估成交量比较大，深度中的价格比较紧密。</p>

<h2 id="网格交易">网格交易</h2>

<p>网格交易一般是指按照固定的等比或者等差价格，进行反复交易，获取利润。</p>

<p>所选择的标的最好是有一个稳定的中心价值，或者是持续看涨的，当然波动性也要足够好。</p>

<p>但是网格交易有一个致命的缺陷就是资金利用率比较低，所以利润的积累是非常缓慢的。</p>

<p>一旦标的大跌，那么可能超出网格的下限，导致网格停止并且持续亏损。</p>

<h2 id="稳定">稳定</h2>

<p>既然网格交易的收益率并不高，还要承担跌出下限的风险，就不是很合适了。</p>

<p>上涨的收益和下跌的风险是对应的，如何能让收益更稳定一些呢？</p>

<p>可以考虑类似BUSD/USDT这样的标的，基本上是在1上下波动，波动幅度也就是万几。</p>

<h2 id="稳定币汇率网格交易的问题">稳定币汇率网格交易的问题</h2>

<h3 id="资金利用率">资金利用率</h3>

<p>虽然稳定币汇率的中心范围不大，但是网格设置过小，会导致格数增加，资金分散。</p>

<p>如果网格设置过大，会导致交易频率下降，收益较低。因为平时波动就是万一万二，</p>

<p>就是算只覆盖上下万五，那么也需要将资金分成10份，资金利用率是非常差的。</p>

<p>一旦汇率超出覆盖范围，虽然不会有损失，但是也不会有收益，因为交易停滞了。</p>

<h3 id="排队时间">排队时间</h3>

<p>稳定币的深度是非常厚的，买一卖一基本上在五千万到一亿左右，一轮的排队时间</p>

<p>至少要4个小时，甚至更长，这个交易的效率也是非常低的。所以twt上有一个大V讲</p>

<p>如何手动搬砖挣猪脚饭的文章很火。</p>

<h2 id="基于深度的网格交易">基于深度的网格交易</h2>

<blockquote>
  <p>全部资金分成8-10份。</p>
</blockquote>

<blockquote>
  <p>交易订单的类型OnlyMaker。</p>
</blockquote>

<blockquote>
  <p>指定单笔资金与深度的关系，比如每1kw深度，可以挂一笔订单。</p>
</blockquote>

<blockquote>
  <p>获取当前买一卖一的深度，计算深度与挂单的关系，比如当前买一深度为3kw，应该挂3笔买单。</p>
</blockquote>

<blockquote>
  <p>根据深度变化情况和成交情况，实时补挂订单或者撤销订单。</p>
</blockquote>

<p>这种方案几乎把全部的资金都用在当前价了，资金利用率比较高。</p>

<p>将资金拆成多份有利于灵活控制补撤订单，提高资金的流转速度。</p>]]></content><author><name></name></author><summary type="html"><![CDATA[这次讲一个特殊类型的网格交易思路，基于深度的网格交易。]]></summary></entry><entry><title type="html">Expect SSH</title><link href="http://peiliping.github.io/blog/2022/05/12/expectssh.html" rel="alternate" type="text/html" title="Expect SSH" /><published>2022-05-12T10:00:00+08:00</published><updated>2022-05-12T10:00:00+08:00</updated><id>http://peiliping.github.io/blog/2022/05/12/expectssh</id><content type="html" xml:base="http://peiliping.github.io/blog/2022/05/12/expectssh.html"><![CDATA[<p>提到自动登录ssh的时候，最好还是使用秘钥登录，当然也可以使用expect。</p>

<p>下面介绍几个expect和ssh的例子。</p>

<h3 id="login">login</h3>

<p>-p是指定远程的端口。</p>

<p>interact执行完成后保持交互状态，把控制权交给控制台，这个时候就可以手工操作了。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
spawn ssh -o ServerAliveInterval=60 -p 11111 username@ip
expect "*password:"
send "Password\r"
interact

</code></pre></div></div>

<h3 id="proxy">proxy</h3>

<p>当需要使用ssh做socket代理的写法，在本地开一个10001的端口。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
spawn ssh -N -g -o ServerAliveInterval=60 -D 10001 -p 11111 username@ip
expect "*password:"
send "Password\r"
interact

</code></pre></div></div>

<h3 id="login-by-proxy">login by proxy</h3>

<p>通过一个本地的代理端口10000来登录ssh。</p>

<p>nc的-X 5是指定Socks V5，-x 是指定代理地址。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
spawn ssh -o ServerAliveInterval=60 -o "ProxyCommand=nc -X 5 -x 127.0.0.1:10000 %h %p" -p 11111 username@ip
expect "*password:"
send "Password\r"
interact

</code></pre></div></div>

<h3 id="proxy-by-proxy">proxy by proxy</h3>

<p>将上面的命令组合一下就好了。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
spawn ssh -N -g -o ServerAliveInterval=60 -o "ProxyCommand=nc -X 5 -x 127.0.0.1:10000 %h %p" -D 10001 -p 11111 username@ip
expect "*password:"
send "Password\r"
interact

</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[提到自动登录ssh的时候，最好还是使用秘钥登录，当然也可以使用expect。]]></summary></entry><entry><title type="html">Awk Functions</title><link href="http://peiliping.github.io/blog/2022/04/22/awklib.html" rel="alternate" type="text/html" title="Awk Functions" /><published>2022-04-22T10:00:00+08:00</published><updated>2022-04-22T10:00:00+08:00</updated><id>http://peiliping.github.io/blog/2022/04/22/awklib</id><content type="html" xml:base="http://peiliping.github.io/blog/2022/04/22/awklib.html"><![CDATA[<p>最近写Awk比较多，所以写了一些便于自己使用的函数。</p>

<h3 id="print">Print</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
function printX(o, _indent, _x){
  if(typeof(o) != "array"){ print o; return; }
  for(_x in o){
    if(typeof(o[_x]) != "array"){
      print _indent, _x, ":", o[_x];
    }else{
      print _indent, _x, ":";
      printX(o[_x], _indent"  ");
    }
  }
}

</code></pre></div></div>

<p>打印嵌套结构的Awk Array，方便调试查看。</p>

<h3 id="clone">Clone</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
function clone(ma, mb, _x){
  for(_x in ma){
    if(typeof(ma[_x]) != "array"){
      mb[_x] = ma[_x];
    }else{
      mb[_x][__Y__] = 1;
      clone(ma[_x], mb[_x]);
      delete mb[_x][__Y__];
    }
  }
}

</code></pre></div></div>

<p>Clone就是一个递归函数，没有什么特别的。为什么要给Awk实现一个Clone函数呢？</p>

<p>因为Awk无法做这样的赋值操作,当map[a]是Array时，b = map[a]会报错,</p>

<p>错误提示为：试图在标量环境中使用数组“map[a]”。这时候我们可以用clone(map[a],b)来替代。</p>

<p>通过用__Y__占位的方式解决多层类型嵌套的问题，clone完后delete掉。</p>]]></content><author><name></name></author><summary type="html"><![CDATA[最近写Awk比较多，所以写了一些便于自己使用的函数。]]></summary></entry><entry><title type="html">Binance Spot Client</title><link href="http://peiliping.github.io/blog/2022/03/11/binancespotclient.html" rel="alternate" type="text/html" title="Binance Spot Client" /><published>2022-03-11T10:00:00+08:00</published><updated>2022-03-11T10:00:00+08:00</updated><id>http://peiliping.github.io/blog/2022/03/11/binancespotclient</id><content type="html" xml:base="http://peiliping.github.io/blog/2022/03/11/binancespotclient.html"><![CDATA[<p>上期我们把BinanceApi的请求签名进行了封装，接下来我们就在这个基础上，实现核心功能。</p>

<h3 id="client">Client</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
getAssets(){
  local path="/sapi/v3/asset/getUserAsset"
  sendRequest "POST" $Host $path
  [[ $? -gt  0 ]] &amp;&amp; return 1
  echo $HttpResult | awk -i ${AwkLib}/json.awk '
  {
    parserJson($0, json);
    for(i=0; i&lt;length(json)-1; i++){
      print json[i]["asset"]"\t"json[i]["free"]"\t"json[i]["locked"];
    }
  }' | sort -k2nr
}

getOpenOrders(){
  local path="/api/v3/openOrders"
  sendRequest "GET" $Host $path
  [[ $? -gt  0 ]] &amp;&amp; return 1
  echo $HttpResult | awk -i ${AwkLib}/json.awk '{parserJson($0, json);printJson(json);}'
}

getOrder(){
  local path="/api/v3/order"
  local symbol=`echo $1 | tr a-z A-Z`
  local key=`getOrderIdType $2`
  local value=$2
  local params="symbol=${symbol}&amp;${key}=${value}"
  sendRequest "GET" $Host $path $params
  [[ $? -gt  0 ]] &amp;&amp; return 1
  echo $HttpResult | awk -i ${AwkLib}/json.awk '{parserJson($0, json);printJson(json);}'
}

cancelOpenOrder(){
  local path="/api/v3/order"
  local symbol=`echo $1 | tr a-z A-Z`
  local key=`getOrderIdType $2`
  local value=$2
  local params="symbol=${symbol}&amp;${key}=${value}"
  sendRequest "DELETE" $Host $path $params
  [[ $? -gt  0 ]] &amp;&amp; return 1
  echo $HttpResult | awk -i ${AwkLib}/json.awk '{parserJson($0, json);printJson(json);}'
}

marketTrade(){
  local path="/api/v3/order"
  local symbol=`echo $1 | tr a-z A-Z`
  local side=$2
  local quantity=$3
  local params="symbol=${symbol}&amp;side=${side}&amp;type=MARKET&amp;quantity=${quantity}"
  sendRequest "POST" $Host $path $params
  [[ $? -gt  0 ]] &amp;&amp; return 1
  echo $HttpResult | awk -i ${AwkLib}/json.awk '{parserJson($0, json);printJson(json);}'
}

limitTrade(){
  local path="/api/v3/order"
  local symbol=`echo $1 | tr a-z A-Z`
  local side=$2
  local price=$3
  local quantity=$4
  local params="symbol=${symbol}&amp;side=${side}&amp;type=LIMIT&amp;timeInForce=GTC&amp;price=${price}&amp;quantity=${quantity}"
  sendRequest "POST" $Host $path $params
  [[ $? -gt  0 ]] &amp;&amp; return 1
  echo $HttpResult | awk -i ${AwkLib}/json.awk '{parserJson($0, json);printJson(json);}'
}

</code></pre></div></div>

<p>总的来说还是比较简单的，预处理一下参数，解析一下返回结果的json，按照一定的格式输出。</p>

<p>U本位合约的Api也是差不多的情况，逻辑基本相同。</p>]]></content><author><name></name></author><summary type="html"><![CDATA[上期我们把BinanceApi的请求签名进行了封装，接下来我们就在这个基础上，实现核心功能。]]></summary></entry><entry><title type="html">Cmd Binance Client</title><link href="http://peiliping.github.io/blog/2022/02/19/cmdbinanceclient.html" rel="alternate" type="text/html" title="Cmd Binance Client" /><published>2022-02-19T10:00:00+08:00</published><updated>2022-02-19T10:00:00+08:00</updated><id>http://peiliping.github.io/blog/2022/02/19/cmdbinanceclient</id><content type="html" xml:base="http://peiliping.github.io/blog/2022/02/19/cmdbinanceclient.html"><![CDATA[<p>无意间在Binance的ApiDoc中看到了基于Curl的示例代码，于是便想封装一个基于Curl的</p>

<p>命令行客户端 。获取一般行情的Api接口直接使用Curl就可以，难题主要是获取个人数据</p>

<p>和交易行为接口,需要对参数进行签名。</p>

<h3 id="client">Client</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
ApiKey="zzzzzzzzzzzzzzzzzzzz"
SecretKey="xxxxxxxxxxxxxxxxx"

HttpCode=""
HttpResult=""

## 对参数数据进行签名
signature(){
  echo -n "$1" | openssl dgst -sha256 -hmac "${SecretKey}" | awk '{print "signature="$2}'
}

## 添加时间校对参数
addTimeParams(){
  local tsParams="recvWindow=10000&amp;timestamp="`date +%s`"000"
  if [ -z "$1" ] ;then
    echo $tsParams
  else
    echo $1"&amp;"$tsParams
  fi
}

## 发送带签名的请求
sendRequest(){
  HttpCode=""
  HttpResult=""
  local method=$1
  local host=$2
  local path=$3
  local params=$4
  params=`addTimeParams ${params}`
  local sig=`signature ${params}`
  params=$params"&amp;"$sig
  local result=`curl -s -w "\t%{http_code}" -H "X-MBX-APIKEY: ${ApiKey}" -X ${method} $host""$path"?"$params`
  HttpCode=`echo $result | awk '{ print $NF}'`
  HttpResult=`echo $result | awk '{ print substr($0,1,length($0)-4); }'`
  if [ $HttpCode -eq 200 ];then
    return 0
  else
    echo $HttpResult
    return 1
  fi
}

</code></pre></div></div>

<p>签名的方法其实很简单，需要注意的是echo的参数-n，是不换行输出的意思。</p>

<p>如果不加这个参数，那么签名数据就无法通过Server端的校验了。</p>

<p>时间校对参数这里只是简单的用了当前时间，如果是谨慎设计的话，应该使用业务时间。</p>

<p>比如获取行情信息后下单，那么下单的校对时间应该是获取行情的时间。</p>

<p>如何获得Http的Code？curl默认是返回Http Response Body的，通过-w参数，</p>

<p>可以获取httpcode，会输出到最后，通过awk将其切分成Code和Result变量。</p>

<p>根据HttpCode来确定函数sendRequest的return值(0/1)。</p>

<p>我们来调用一下这个Client。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  local host="https://xxxxx.com"
  local path="/sapi/v3/asset/getUserAsset"
  sendRequest "POST" $host $path
  [[ $? -gt  0 ]] &amp;&amp; return 1
  echo $HttpResult

</code></pre></div></div>

<p>判断sendRequest的return值，如果大于0，则是请求失败，程序终止。</p>

<p>[[ $? -gt  0 ]] &amp;&amp; return 1 是一种if语句的简洁写法。</p>

<h3 id="shell中如何识别number类型">Shell中如何识别Number类型</h3>

<p>网上可以搜到很多种，我比如喜欢下面的这个方法</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  expr $1 "+" 1 &amp;&gt; /dev/null
  if [ $? -eq 0 ];then
    echo "orderId"
  else
    echo "origClientOrderId"
  fi

</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[无意间在Binance的ApiDoc中看到了基于Curl的示例代码，于是便想封装一个基于Curl的]]></summary></entry></feed>